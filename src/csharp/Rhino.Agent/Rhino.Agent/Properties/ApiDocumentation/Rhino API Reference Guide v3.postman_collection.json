{
	"info": {
		"_postman_id": "c52aa93b-1209-47e5-8867-24810ddc6582",
		"name": "Rhino API Reference Guide v3",
		"description": "Learn how to access and use Rhinoâ€™s API to integrate automated testing frameworks, submit test results, and automate various other aspects of your applications via simple HTTP requests.\r\n\r\n# Reference\r\n\r\n***\r\n\r\n* Configurations\r\n* Test Cases\r\n* Page Models\r\n* Execution\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "One Time Setup",
			"item": [
				{
					"name": "Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "148428eb-562f-4b2a-9770-d8049b0dccea",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d5d1f34-6906-4346-a2fa-484b150d09b5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"screenshotsOut\": \"{{rhino_images}}\",\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Creates a new _**Rhino Configuration**_.\r\n\r\n```\r\nPOST /api/v3/configurations\r\n```\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Configuration](#get-configuration) response content.\r\n\r\n### Request Example\r\n```js\r\n{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"<rhino_user>\",\r\n    \"userName\": \"<rhino_password>\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                  |\r\n|----|---------------------------------------------------------------------------------------------|\r\n|201 |Success, the _**Configuration**_ created and identifier was returned as part of the response.|\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.                   |\r\n|500 |Fail, the server encountered an unexpected error.                                            |"
							},
							"response": [
								{
									"name": "Create Configuration",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"screenshotsOut\": \"{{rhino_images}}\",\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af599c1d-4068-43f8-8825-42c47717fd5b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_.\r\n\r\n```\r\nGET /api/v3/configurations\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n    \"data\": {\r\n        \"configurations\": [\r\n        {\r\n            \"id\": \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n            \"models\": [\r\n                \"7adc7914-2bfe-41f0-9808-422bab5c412b\"\r\n            ],\r\n            \"tests\": [\r\n                \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n            ]\r\n        },\r\n        ...\r\n    ]}\r\n}\r\n```\r\n\r\nThe example response includes one configuration group, with one elements collection and one tests collection.\r\n\r\n|Name    |Type  |Description                                                              |\r\n|--------|------|-------------------------------------------------------------------------|\r\n|id      |string|The ID of the _**Rhino Configuration**_.                                 |\r\n|models  |array |All available _**Rhino Page Models**_ for this _**Rhino Configuration**_.|\r\n|tests   |array |All available _**Tests Cases**_ for this _**Rhino Configuration**_.      |\r\n\r\n### Response Codes\r\n|Code|Description                                                                |\r\n|----|---------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Collections**_ were returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                          |"
							},
							"response": [
								{
									"name": "Get Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f5ee44b-6ca9-4db7-a83c-d2a29e264735",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Configuration**_.\r\n\r\n```\r\nGET /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [\r\n    \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n  ],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [\r\n    \"7adc7914-2bfe-41f0-9808-422bab5c412b\"\r\n  ],\r\n  \"connector\": \"connector_xray\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"<rhino_user>\",\r\n    \"userName\": \"<rhino_password>\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reportOut\": \"<path_to_reports_folder>\",\r\n    \"logsOut\": \"<path_to_logs_folder>\",\r\n    \"reporters\": null,\r\n    \"connectionString\": null,\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  },\r\n  \"providerConfiguration\": {\r\n    \"collection\": \"http://localhost:8080\",\r\n    \"password\": \"admin\",\r\n    \"user\": \"admin\",\r\n    \"project\": \"XDP\",\r\n    \"bugManager\": true,\r\n    \"capabilities\": {\r\n      \"bucketSize\": 15,\r\n      \"dryRun\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                                                  |Type  |Description                                                                                            |\r\n|------------------------------------------------------|------|-------------------------------------------------------------------------------------------------------|\r\n|name                                                  |string|The name of this _**Rhino Configuration**_.                                                            |\r\n|testsRepository                                       |array |A collection of folders and files in which there are _**Rhino Test Cases**_.                           |\r\n|driverParameters                                      |array |A collection of parameters which represents the target platforms on which the tests will run.          |\r\n|dataSource                                            |array |A collection of data objects which will be cascaded as primary table for all _**Rhino Test Cases**_.   |\r\n|models                                                |array |A collection of _**Rhino Page Models**_ sources.                                                       |\r\n|gravityEndpoint                                       |string|Gravity Server endpoint. Use to send requests using remote gravity service instead of embedded service.|\r\n|[authentication](#authentication)                     |string|User name and password for authentication on Rhino Service.                                            |\r\n|[engineConfiguration](#engine-configuration)          |object|Configure the automation engine behavior.                                                              |\r\n|[screenshotsConfiguration](#screenshots-configuration)|object|Configure the screenshot behavior.                                                                     |\r\n|[reportConfiguration](#report-configuration)          |object|Configure the reporting behavior.                                                                      |\r\n|[connectorConfiguration](#connector-configuration)    |object|Configure the behavior against 3rd party automation provider such as Jira, Test Rail or Azure DevOps.  |\r\n\r\n#### Authentication\r\n|Name    |Type  |Description                 |\r\n|--------|------|----------------------------|\r\n|userName|string|A valid Rhino API user name.|\r\n|password|string|A valid Rhino API password. |\r\n\r\n#### Engine Configuration\r\n|Name                    |Type   |Description                                                                                                            |\r\n|------------------------|-------|-----------------------------------------------------------------------------------------------------------------------|\r\n|maxParallel             |number |The maximum number of tests that will be executed in parallel.                                                         |\r\n|failOnException         |boolean|When set to true, test cases will fail if exceptions were thrown during test regardless of assertions passed or failed.|\r\n|optimalThreshold        |decimal|Any test which violates this threshold (in minutes), will be marked as non-optimal.                                    |\r\n|qualityThreshold        |decimal|Any test which violates this threshold (in percents), will be marked as failed.                                        |\r\n|toleranceThreshold      |decimal|Any test which falls within this threshold (in percents), will be marked as warning when fail.                         |\r\n|priority                |number |All tests with priority lower than this number will be marked as warning when fail.                                    |\r\n|severity                |number |All tests with severity lower than this number will be marked as warning when fail.                                    |\r\n|errorOnExitCode         |number |The error code (console application error code) which will cause the CI/CD process to fail.                            |\r\n|elementSearchingTimeout |number |The timeout in millisecond when searching for elements.                                                                |\r\n|pageLoadTimeout         |number |The timeout in millisecond when loading a page or application.                                                         |\r\n|retrunExceptions        |boolean|When set to false, exceptions will not be returned by Gravity engine. This might affect the tests results.             |\r\n|returnPerformancePoints |boolean|When set to false, performance data will not be returned by Gravity engine. This might affect the tests results.       |\r\n|returnEnvironment       |boolean|When set to true, will return the current Gravity Environment parameters.                                              |\r\n|terminateOnAssertFailure|boolean|When set to true, automation will stop if assertion any assertion action failed.                                       |\r\n|integration             |string |3rd party platform integration. Available integrations are, BrowserStack and LambdaTest.                               |\r\n\r\n#### Screenshots Configuration\r\n|Name             |Type   |Description                                                                                               |\r\n|-----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|keepOriginal     |boolean|When set to true, will keep the original file created by Gravity engine, when creating a new Rhino report.|\r\n|onExceptionOnly  |boolean|When set to true, returns a screenshot only if exception was thrown during execution.                     |\r\n|returnScreenshots|boolean|When set to false, screenshots will be returned from Gravity engine.                                      |\r\n|screenshotsOut   |decimal|The directory in which to save automatic screenshots.                                                     |\r\n\r\n#### Report Configuration\r\n|Name            |Type   |Description                                                                                               |\r\n|----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|reportOut       |string |The directory in which to save reports.                                                                   |\r\n|logsOut         |string |The directory in which to save logs.                                                                      |\r\n|reporters       |array  |Reporters implementations to use with this configuration.                                                 |\r\n|archive         |boolean|When set to true, will archive the report out folder as zip file and delete the original folder.          |\r\n|localReport     |boolean|When set to false, will not generate Rhino report.                                                        |\r\n|addGravityData  |boolean|When set to true, will save Gravity API requests and response along with the reports and logs information.|\r\n\r\n#### Connector Configuration\r\n|Name        |Type   |Description                                                                                                                                       |\r\n|------------|-------|--------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|connector   |string |Connector implementation type to use with this _**Rhino Configuration**_. If not specified, 'connecor_text' will be used as default.              |\r\n|collection  |string |The server base address under which the application is hosted (i.e. Jira or DevOps server endpoint).                                              |\r\n|password    |string |A valid password for your application (i.e. Jira or DevOps password).                                                                             |\r\n|userName    |string |A valid user for your application (i.e. Jira or DevOps password). The use must have create permissions for **Tests**, **Bugs** and **Executions**.|\r\n|project     |string |The project name or ID (depends on the connector implementation) under which to find and execute tests.                                           |\r\n|bugManager  |boolean|Set to **true** in order to activate the bug manager feature for the selected connector.                                                          |\r\n|capabilities|object |A set of key/value for passing explicit settings and parameters to your automation provider connector or other plugins implementations.           |\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Configuration**_ was returned as part of the response.               |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Get Configuration",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Edit Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19c45186-d997-465c-be81-41cb98750f32",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Updates an existing _**Rhino Configuration**_.\r\n\r\n```\r\nPUT /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Configuration](#get-configuration) [Response Content](#response-content).\r\n\r\n### Request Example\r\n```js\r\n{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n    \"testsRepository\": [ ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [ ],\r\n    \"connector\": \"connector_text\",\r\n    \"gravityEndpoint\": \"\",\r\n    \"authentication\": {\r\n        \"password\": \"<rhino_user>\",\r\n        \"userName\": \"<rhino_password>\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3.0,\r\n        \"qualityThreshold\": 0.0,\r\n        \"toleranceThreshold\": 0.0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": false,\r\n        \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reportOut\": \"<path_to_reports_folder>\",\r\n        \"logsOut\": \"<path_to_logs_folder>\",\r\n        \"reporters\": null,\r\n        \"connectionString\": null,\r\n        \"dataProvider\": null,\r\n        \"archive\": false,\r\n        \"localReport\": true,\r\n        \"addGravityData\": true\r\n    }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Configuration**_ was returned as part of the response.               |\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.           |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Edit Configuration",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c19ae54-a5d7-44a0-b80d-44120e1b1edc",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Configuration**_.\r\n\r\n```\r\nDELETE /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n> Please Note: Deleting a configuration cannot be undone. It does not, however, affect test cases/models.\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was deleted.                                        |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Delete Configuration",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb50f040-c984-4235-a710-a6daff9cddaf",
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Deletes all existing _**Rhino Configuration**_ for the authenticated user.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a configuration cannot be undone. It does not, however, affect test cases/models.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Configurations**_ were deleted.  |\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Configurations",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Configurations API**_ to create configurations for executing automation testing.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b238767-95c0-4ff7-a892-caba802d2e52",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac19432e-7870-497a-9d5c-67b43f1cfd95",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18474414-446c-4c4c-b5f3-77395d3126ce",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b1bcc2e-0149-4098-b7a0-1f018d014149",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Update Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d6c4536-db2d-4d1a-930f-13e64f2f17cf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configuration name updated\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.name.includes(\"After Update\");\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.driverParameters.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"EdgeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"IEDriverServer\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Update Configuration - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbe5a928-9211-4984-9843-7b1b63553ed8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/not_an_id",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"not_an_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Update Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebc90e0c-39ab-4b30-9e4f-d55a9a1f55f5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b933d64a-4c52-4e62-a3c3-c13b98bea198",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Configurations - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14b75c2d-76e0-4582-ac32-d4d19c363a03",
										"exec": [
											"pm.test(\"Configurtions count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Configuration - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "613107e2-b8bb-4f34-abfe-44c62f7375de",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7549235-33e3-4faa-9469-a82023c48080",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89efddb3-6670-4e07-ac19-d843df8cffbf",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab859bc2-e776-4ae9-9e30-68c97b61fbe9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Get Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02172f75-b58a-410b-ba8f-320a8091c2ad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Delete Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "714fc305-4833-4524-a7d8-a90aed89380f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Delete Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77849a81-e88e-4e99-a359-428128853da3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc8d273d-cb7a-43ba-b222-a8abd593b506",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9af7958-3d0e-408a-8a8d-3c0bb9821403",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28fcb0dc-fca9-44c3-a100-44c9d83fa656",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c695526-cdc8-4508-9c8a-a02c3879100d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Configurations**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7e935b4-f0e2-4c40-acb4-746016139c16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a3724847-868f-4f7c-9b2a-fe0a6b5a1162",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Page Models",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3461d877-0bed-4736-a481-9bc6736e1381",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"Students Input Models\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Creates a new _**Rhino Model**_.\r\n\r\n```\r\nPOST /api/v3/models\r\n```\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Model](#get-model) response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                      |\r\n|----|-------------------------------------------------------------------------------------------------|\r\n|201 |Success, the _**Models Collection**_ created and identifier was returned as part of the response.|\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.                       |\r\n|500 |Fail, the server encountered an unexpected error.                                                |"
							},
							"response": [
								{
									"name": "Create Models Collection",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Students Input Models\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b375fce-d69f-41e0-8c80-1c843edd4929",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Returns a list of available _**Rhino Models**_.\r\n\r\n```\r\nGET /api/v3/models\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"collection\": [\r\n      {\r\n        \"id\": \"1ed4ea1c-9959-40d7-b40e-717b8fc1cfb4\",\r\n        \"configurations\": [\r\n          \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n          \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n        ],\r\n        \"models\": 1,\r\n        \"entries\": 3\r\n      },\r\n      {\r\n        \"id\": \"ba6b3da7-1979-48ea-9b00-e30682f5f111\",\r\n        \"configurations\": [],\r\n        \"models\": 1,\r\n        \"entries\": 3\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 models, with 1 entries each and 2 configurations for one of them.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|id            |string|The ID of the _**Rhino Models**_.                |\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n|models        |number|Total models under the models collection.        |\r\n|entries       |number|Total entries (elements) under the model.        |"
							},
							"response": [
								{
									"name": "Get Models",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a556dfe-8a59-43cc-b404-720ca7f991b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Model**_ collection.\r\n\r\n```\r\nGET /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                |\r\n|-------------|------|-------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Model**_ collection.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  },\r\n  \"name\": \"Students Table Models\",\r\n  ...\r\n]\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                   |Type  |Description                                                         |\r\n|-----------------------|------|--------------------------------------------------------------------|\r\n|name                   |string|The name of this _**Rhino Model**_.                                 |\r\n|[entries](#model-entry)|array |A collection of _**Rhino Model Entry**_.                            |\r\n|context                |object|A free style object which can be used to further describe the model.|\r\n\r\n#### Model Entry\r\n|Name   |Type  |Description                                                                                |\r\n|-------|------|-------------------------------------------------------------------------------------------|\r\n|name   |string|The name of the element (required and must be compliant with Rhino's language rules).      |\r\n|value  |string|The value of selected locator (required).                                                  |\r\n|type   |string|The type of selected locator. If no type specified, default is XPath.                      |\r\n|comment|string|Any comment relevant for further describing this model entry (optional).                   |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Models**_ were returned as part of the response.       |\r\n|404 |Not Found, the _**Models**_ were not found under the models collection.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Models Collection",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Associated Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cf93874-f12f-47b5-8901-624af6fff54a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_ which are associated with this _**Rhino Model**_ collection.\r\n\r\n```\r\nGET /api/v3/models/:collection_id/configurations\r\n```\r\n\r\n|Name         |Type  |Description                                 |\r\n|-------------|------|--------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Models**_ collection.|\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"configurations\": [\r\n      \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n      \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Configurations**_ were returned as part of the response.|\r\n|404 |Not Found, the _**Rhino Models**_ collection was not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Associated Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Models to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5cf4dd7-6e73-426b-9123-85980d31c197",
										"exec": [
											"pm.test(\"Status code is 200\", function () {    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"name\": \"Students Input Models - 2\",\n\t\t\"entries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"search students text-box\",\n\t\t\t\t\"value\": \"#SearchString\",\n\t\t\t\t\"type\": \"css selector\",\n                \"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students text-box on the top center panel under students page.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"search students button\",\n\t\t\t\t\"value\": \"//input[@id='SearchButton']\",\n                \"type\": \"xpath\",\n\t\t\t\t\"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students button on the top center panel under students page.\"\n\t\t\t}\t\n\t\t],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n\t\t}\n\t}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "## Add Models to Collection\r\nAdd additional _**Rhino Models**_ into an existing collection. If the model name is already exists on another model,\r\nit will be ignored.\r\n\r\n```\r\nPATCH /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                 |\r\n|-------------|------|--------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Models**_ collection.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Model](#get-model) response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                        |\r\n|----|-------------------------------------------------------------------|\r\n|200 |Success, the _**Collection**_ was returned as part of the response.|\r\n|404 |Not Found, the _**Collection**_ was not found.                     |\r\n|500 |Fail, the server encountered an unexpected error.                  |"
							},
							"response": [
								{
									"name": "Add Models to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"name\": \"Students Input Models - 2\",\n\t\t\"entries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"search students text-box\",\n\t\t\t\t\"value\": \"#SearchString\",\n\t\t\t\t\"type\": \"css selector\",\n                \"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students text-box on the top center panel under students page.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"search students button\",\n\t\t\t\t\"value\": \"//input[@id='SearchButton']\",\n                \"type\": \"xpath\",\n\t\t\t\t\"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students button on the top center panel under students page.\"\n\t\t\t}\t\n\t\t],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n\t\t}\n\t}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Configuration to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6c7d0f9-482b-4eff-bfe8-5cfcd175949a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Adds a new _**Configuration**_ to the provided _**Elements Collection**_.\r\n\r\n> PATCH /api/elements/:id/configurations/:configuration_id\r\n\r\n|Name            |Type  |Description                               |\r\n|----------------|------|------------------------------------------|\r\n|id              |string|The ID of the _**Elements Collection**_.|\r\n|configuration_id|string|The ID of the _**Configuration**_.        |\r\n\r\n### Response Codes\r\n|Code|Description                                                                    |\r\n|----|-------------------------------------------------------------------------------|\r\n|204 |Success, the _**Elements Collection**_ was updated.                            |\r\n|400 |Bad Request, the _**id**_ or _**configuration_id**_ were not provided.         |\r\n|404 |Not Found, the _**Elements Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                              |"
							},
							"response": [
								{
									"name": "Add Configuration to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e16ec495-265d-4497-b055-227bd4adad2d",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Model**_ collection.\r\n\r\n```\r\nDELETE /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                |\r\n|-------------|------|-------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Model**_ collection.|\r\n\r\n> Please Note: Deleting a collection cannot be undone and it can affect test cases and configurations which were using the models.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Model**_ collection was deleted. |\r\n|404 |Not Found, the _**Model**_ was not found.        |\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Models Collection",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Models Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39861da2-2274-46fa-9e08-cd53dc45d889",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Deletes all existing _**Rhino Model**_ collections.\r\n\r\n```\r\nDELETE /api/v3/models\r\n```\r\n\r\n> Please Note: Deleting a collection cannot be undone and it can affect test cases and configurations which were using the models.\r\n\r\n### Response Codes\r\n|Code|Description                                       |\r\n|----|--------------------------------------------------|\r\n|204 |Success, the _**Model**_ collections were deleted.|\r\n|500 |Fail, the server encountered an unexpected error. |"
							},
							"response": [
								{
									"name": "Delete Models Collections",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Elements API**_ to create page models and submit elements collections.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc501a81-7dfd-4750-a0c3-93745c3839cb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6415b317-39e8-4c37-a863-26deb2d0bebd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "613d8041-c03f-4563-ba08-2b675e39b94c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfc88cfe-3b4d-4b4f-9e19-db0808249901",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4d28f0c-af4a-4c6b-91b4-26e7e096e073",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Create Models Collection - Same Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a43b4250-b533-4a77-9c28-8a958c172def",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Create Models Collection - No Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3f62d1-7621-4d32-88c5-431aba7418ab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ ]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Create Models Collection - No Entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1357076-169f-4331-93aa-4e19bad8682b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ce45238-56db-4c41-beac-13388391785e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5cc4e76-92d1-4059-afe7-c3ef845b1b77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Get Models Collection - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90ed3db2-ee23-4b8b-9ab6-1e7f4f31f276",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Associated Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4505ac8d-bbc5-42d9-9583-43e286bc9d55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Associated Configurations - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0def5b42-5803-4729-be96-a2890c11653a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f15ef0c-c64e-4467-9481-5f04b334003b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 3\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Associated Configurations - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45a2d5a3-7a8e-4e7a-81ac-380f974e959a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Add Models - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afd189fa-f97a-4af7-ac73-14f9ec47a455",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f83d3bb5-7b90-4b5f-ac5e-e43f58e0b386",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Add Models - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6a21ae2-f5df-4ecf-8968-3bfcc0420104",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fea6d683-df7b-4dc9-b725-902c1c43d5aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Add Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16b240b5-c268-4eb2-9068-be1cd7838a94",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Add Configuration - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3db82c6-fabd-42b3-bb3c-d5b2fb73afcb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Add Configuration - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28cd74d6-dc3f-4836-ae79-1dc667acb21b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/not_a_configuration",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"not_a_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Delete Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cbf5f73-7f32-49b9-8531-9ef90b5477d2",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Delete Collection - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "850f083b-47c8-42fd-a3d0-73de5885f197",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #23: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a81861b7-3830-41df-bd07-e0d61f73f191",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 3;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #24: Delete Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82e56bc2-f074-4202-a19f-e6d557cdd2b7",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #25: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df9f4314-0890-437c-a742-eead231d71d4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58d796dd-e8f2-40be-b2e0-2cc443832817",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc99eadf-e5fc-401a-a7af-f6a0c36786ca",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Tests Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f301535-6304-489c-a0ea-f5e647c2d8e2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student}\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {search students text-box}\r\n4. click on {search students button}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {gravitymvctestapplication.azurewebsites.net}\r\n[5] assert {count} on {//td[@id]} is greater than {0}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Models**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72043c62-75ad-4116-a280-572666fefc7e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "28a4a298-362e-411f-8173-fd4194e18a3d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test Cases",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Tests Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a1947bb-dfe1-41c2-b38a-c9b58502023e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Creates a new _**Rhino Test Case Collection**_.\r\n\r\n```\r\nPOST /api/tests/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                                                             |\r\n|----------------|------|----------------------------------------------------------------------------------------|\r\n|configuration_id|string|The ID of the configuration group under which to create the tests collection (optional).|\r\n\r\n### Request Fields\r\nNew _**Rhino Test Case Collection**_ using the same response format as [Get Test Case Collection](#get-test-case-collection).  \r\n\r\n> Please note, it is possible to create an empty collection without provided any information in the request body.\r\n\r\n#### Request Sample\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\n### Response Fields\r\n|Name |Type  |Description              |\r\n|-----|------|-------------------------|\r\n|id   |string|The ID of the collection.|\r\n\r\n#### Response Sample\r\n```js\r\n{\r\n  \"data\": {\r\n    \"id\": \"73e21d1b-770b-4347-805a-eae4f622a146\"\r\n  }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                    |\r\n|----|---------------------------------------------------------------|\r\n|201 |Success, the _**Rhino Test Case Collection**_ was created.     |\r\n|404 |Not Found, the provide _**Rhino Configuration**_ was not found.|\r\n|500 |Fail, the server encountered an unexpected error.              |"
							},
							"response": [
								{
									"name": "Create Collection - Multiple Tests, Data Driven",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] 002\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Collection - Single Test, No Data, with Configuration",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {https://www.google.com/} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (//input[@name='q'])\n4. click on the first {//ul[@role='listbox']/li}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {google.com}\n[3] assert on {//input[@name='q']} get value from {value} attribute must match {gravity}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Collection - Single Test, Data Driven",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Tests Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c59718-9f40-4cb0-9cde-ea5f312d2151",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Returns a list of available _**Rhino Test Cases**_ collections.\r\n\r\n```\r\nGET /api/v3/tests\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"collection\": [\r\n      {\r\n        \"id\": \"1ed4ea1c-9959-40d7-b40e-717b8fc1cfb4\",\r\n        \"configurations\": [\r\n          \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n          \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n        ],\r\n        \"tests\": 3\r\n      },\r\n      {\r\n        \"id\": \"ba6b3da7-1979-48ea-9b00-e30682f5f111\",\r\n        \"configurations\": [],\r\n        \"tests\": 3\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 collections, with 3 tests in each and 2 configurations for one of them.\r\n\r\n|Name          |Type  |Description                                                   |\r\n|--------------|------|--------------------------------------------------------------|\r\n|id            |string|The ID of the _**Rhino Tests Collection**_.                   |\r\n|configurations|array |All _**Rhino Configurations**_ which are using the collection.|\r\n|tests         |number|Total models under the models collection.                     |\r\n\r\n### Response Codes\r\n|Code|Description                                                                            |\r\n|----|---------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Tests Collection**_ information returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                                      |"
							},
							"response": [
								{
									"name": "Get Tests Collections",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Tests Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e824e0-7c7a-4d1d-b28a-4c4bd600e384",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Test Case**_ collection (test suite content).\r\n\r\n```\r\nGET /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n  {\r\n    \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n    \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n    \"search-text-box\": \"//input[@id='SearchString']\",\r\n    \"search-button\": \"#SearchButton\",\r\n    \"students-table\": \"//td[@id]\"\r\n  }\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n> The response is an array of Rhino Test Spec of media type `text/plain`.\r\n> Scenarios are separated by an empty line, followed by `>>>` followed by another empty line.\r\n> The fields are annotated following Rhino's language text format.\r\n\r\n#### Mandatory Fields\r\n|Name                 |Type|Description                                                  |\r\n|---------------------|----|-------------------------------------------------------------|\r\n|test-id              |text|The unique ID of the test case.                              |\r\n|test-scenario        |text|The title of the test case.                                  |\r\n|test-actions         |text|Line separated list of the test actions to execute.          |\r\n\r\nThe following system fields are sometimes included in the response:\r\n\r\n#### Optional Fields\r\n|Name                 |Type|Description                                                            |\r\n|---------------------|----|-----------------------------------------------------------------------|\r\n|test-expected-results|text|Line separated list of the test expected results to execute.           |\r\n|test-data-provider   |text|JSON or Markdown format table (string, string) for data driven testing.|\r\n|test-priority        |text|The test priority level - must include number i.e. \"1 - High\".         |\r\n|test-severity        |text|The test severity level - must include number i.e. \"4 - Low\".          |\r\n|test-tolerance       |text|The test tolerance level - must include decimal number i.e. \"80.5%\".   |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Tests Cases**_ returned as part of the response. |\r\n|404 |Not Found, the provided _**Rhino Test Case Collection**_ was not found.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Tests Collection",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Associated Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb0e5a0-3498-450f-b8fa-9cd6c92d44ac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_ which are associated with this _**Rhino Test Case**_ collection.\r\n\r\n```\r\nGET /api/v3/tests/:collection_id/configurations\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"configurations\": [\r\n      \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n      \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Configurations**_ were returned as part of the response.|\r\n|404 |Not Found, the _**Rhino Test Case**_ collection was not found.                |\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Associated Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Tests to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d35d160-a8e5-49c0-9a6c-11f59f644bd3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] rhino-documentation-004\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Add additional _**Rhino Test Cases**_ into an existing collection.  \r\n\r\n> Please note, there is no duplication check here, and you can add tests with the same ID.\r\n> However, Rhino Engine, will not execute them, since it will distinct all IDs before running automation.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Test Case Collection](#get-test-case-collection) response content.\r\n\r\n### Request Example\r\n```\r\n[test-id] rhino-documentation-003\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n  {\r\n    \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n    \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n    \"search-text-box\": \"//input[@id='SearchString']\",\r\n    \"search-button\": \"#SearchButton\",\r\n    \"students-table\": \"//td[@id]\"\r\n  }\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-004\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                        |\r\n|----|-------------------------------------------------------------------|\r\n|200 |Success, the _**Collection**_ was returned as part of the response.|\r\n|400 |Bad Request, no test cases were provided in the request body.      |\r\n|404 |Not Found, the _**Collection**_ was not found.                     |\r\n|500 |Fail, the server encountered an unexpected error.                  |"
							},
							"response": [
								{
									"name": "Add Tests to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] rhino-documentation-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] rhino-documentation-004\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Configuration to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c169e60b-9385-46c4-8b65-426933f9dc6a",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Add additional _**Rhino Configuration**_ into an existing collection.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                    |\r\n|----------------|------|-----------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Test Case**_ collection.|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.       |\r\n\r\n### Response Codes\r\n|Code|Description                                                           |\r\n|----|----------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was applied to the _**Collection**_. |\r\n|404 |Not Found, the _**Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                     |"
							},
							"response": [
								{
									"name": "Add Configuration to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a429c5ae-28aa-4854-bd62-8246c5901e64",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Test Case**_ collection.\r\n\r\n```\r\nDELETE /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n  \r\n> Please Note: Deleting a collection cannot be undone and it can affect the configurations which were using the test cases.  \r\n\r\n### Response Codes\r\n|Code|Description                                             |\r\n|----|--------------------------------------------------------|\r\n|204 |Success, the _**Test Case**_ collection was deleted.    |\r\n|404 |Not Found, the _**Test Case**_ collection was not found.|\r\n|500 |Fail, the server encountered an unexpected error.       |"
							},
							"response": [
								{
									"name": "Delete Collection",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a915d787-bfb8-4f37-9c2c-eb538d434246",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Deletes all existing _**Rhino Test Case**_ collections.\r\n\r\n```\r\nDELETE /api/v3/tests\r\n```\r\n  \r\n> Please Note: Deleting a collection cannot be undone and it can affect the configurations which were using the test cases.\r\n  \r\n### Response Codes\r\n|Code|Description                                           |\r\n|----|------------------------------------------------------|\r\n|204 |Success, the _**Test Case**_ collections were deleted.|\r\n|500 |Fail, the server encountered an unexpected error.     |"
							},
							"response": [
								{
									"name": "Delete All Collections",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Collection API**_ to integrate automated tests, submit test results and automate various aspects of your application.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eacc2f3-3f54-451d-98dc-481ac792f9df",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Tests Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faaaea5a-b920-4e63-ab8d-6d43d4c7cefd",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc9470a6-b125-4e03-8e7a-d52336921ada",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Create Tests Collection - No Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0990469-ff26-4366-97a5-5cf579742d2b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbc61db2-6b98-4cbc-afa1-0b98d7e67949",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 2\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Get Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da485ab0-f387-43ee-9c8f-d80d093d6f98",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Tests Collection - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80c0f0d0-f8c5-4487-b686-4ab2a1ffbd81",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Associated Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d28ec506-f07a-4002-baf9-8474e7c238d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Get Associated Configurations - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07258b06-84be-4493-b570-7ccd5dad36c4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Create Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "504e90e9-5f67-40e1-b515-190c5de14e24",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Associated Configurations - Configuration Not Found Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dd4b0ec-0216-491a-bb14-a14c761c9511",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Add Tests - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fdcd906-73d0-44c1-bbdb-af50a232aaba",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 3\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Add Tests - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84e821e7-5594-4bfb-b405-f6c699217cdb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Add Configuration - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6b40f26-b207-4d5d-8553-aef057f9a98f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/not_a_configuration",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations",
										"not_a_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93bea5f6-086e-4d84-adbc-5a1421982b80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 5\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Delete Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5649e38a-b97c-49ee-8985-c3ca71f7a4f9",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Delete Collection - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a6fd26-85c0-4002-a361-960e4a675b7a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe80e649-ff6f-4feb-89ae-50264efd90cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 2\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Delete Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53fe3dea-0ad2-4c13-98e0-8b74bc9f9375",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85503b18-c4c6-4811-a9d5-6a0b7d1d1f1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 0\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('0');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e8dc144e-ca0f-4076-ac6c-e69029dd5bf4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58b4120a-e831-40fb-972f-89628614081d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Test Cases**_ and to create or modify automation scenarios.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "baf208be-cad5-4330-a508-379300784b1a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "03b305e3-b03b-408e-adba-c157d989843f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test Runs",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "816d756b-cb29-4af0-a2ba-32b9deedba3e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01305b34-7d55-4661-8645-f3409d660c7b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": true,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fa12689-5182-49e0-8f11-0ce463c60981",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search-text-box}\n4. click on {@search-button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[5] assert {count} on {@students-table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\n\t\t\"search-button\":\"#SearchButton\",\n\t\t\"students-table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Preconditions for _**Rhino API**_ microservices.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Run by Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31c04cec-12a1-44b8-a92c-bff0cc4a2b4b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "# API: Rhino\r\nUse the following API methods run automation specs and get _**Rhino Test Run**_ object.\r\n\r\n## Run by Configuration\r\nRuns an existing configuration and returns _**Rhino Test Run**_ object.\r\n\r\n```\r\nGET /api/v3/rhino/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n#### Response Content\r\n\r\n```js\r\n{\r\n  \"key\": \"unattached-2020.08.19.06.36.43.698\",\r\n  \"actual\": true,\r\n  \"reasonPhrase\": \"\",\r\n  \"title\": \"Rhino Automation - Test Run Generator (ID: 2020.08.19.06.36.43.698); (Configuration: Rhino Automation - Chrome)\",\r\n  \"start\": \"2020-08-19T18:36:43.6989032+03:00\",\r\n  \"end\": \"2020-08-19T18:37:36.4887447+03:00\",\r\n  \"runTime\": \"00:00:52.7898415\",\r\n  \"testCases\": [\r\n    {\r\n      \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0\",\r\n      \"key\": \"rhino-documentation-001\",\r\n      \"testSuite\": \"\",\r\n      \"testRunKey\": \"unattached-2020.08.19.06.36.43.698\",\r\n      \"scenario\": \"search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\",\r\n      \"reasonPhrase\": \"\",\r\n      \"actual\": true,\r\n      \"steps\": [\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-0\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\",\r\n          \"command\": \"GoToUrl\",\r\n          \"expected\": \"<span>assert {url} match {gravitymvctestapplication.azurewebsites.net}</span>\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:14.2072016\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-1\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"2. close all child windows (to make sure only the web site is open and visible)\",\r\n          \"command\": \"CloseAllChildWindows\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.0119308\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-2\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"3. send keys {Carson} into {//input[@id='SearchString']}\",\r\n          \"command\": \"SendKeys\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.1368129\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-3\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"4. click on {#SearchButton} using {css selector}\",\r\n          \"command\": \"Click\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.2752300\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-4\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"5. wait for {3000} milliseconds\",\r\n          \"command\": \"Wait\",\r\n          \"expected\": \"<span>assert {count} on {//td[@id]} is greater than {0}</span>\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:03.0361094\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-5\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"6. register parameter {first_name} take {Jhon}\",\r\n          \"command\": \"RegisterParameter\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:15.0670764\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-6\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"7. close browser\",\r\n          \"command\": \"CloseBrowser\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.1242385\"\r\n        }\r\n      ],\r\n      \"totalSteps\": 7,\r\n      \"link\": \"\",\r\n      \"iteration\": 0,\r\n      \"dataSource\": [\r\n        {\r\n          \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n          \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n          \"search-text-box\": \"//input[@id='SearchString']\",\r\n          \"search-button\": \"#SearchButton\",\r\n          \"students-table\": \"//td[@id]\"\r\n        }\r\n      ],\r\n      \"modelEntries\": [],\r\n      \"priority\": \"\",\r\n      \"severity\": \"\",\r\n      \"tolerance\": 0.0,\r\n      \"passedOnAttempt\": 0,\r\n      \"qualityRank\": 100.0,\r\n      \"inconclusive\": false,\r\n      \"start\": \"2020-08-19T18:36:43.9059141+03:00\",\r\n      \"end\": \"2020-08-19T18:37:36.4732305+03:00\",\r\n      \"runTime\": \"00:00:52.5673164\",\r\n      \"environment\": {\r\n        \"applicationParams\": {},\r\n        \"macroParams\": {},\r\n        \"sessionParams\": {\r\n          \"first_name\": \"Jhon\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"totalTests\": 1,\r\n  \"totalSteps\": 7,\r\n  \"totalPass\": 1,\r\n  \"totalPassSteps\": 7,\r\n  \"totalFail\": 0,\r\n  \"totalFailSteps\": 0,\r\n  \"totalIterations\": 1,\r\n  \"totalInconclusive\": 0,\r\n  \"successRate\": 100.0,\r\n  \"qualityRank\": 100.0,\r\n  \"link\": null,\r\n  \"performancePoints\": {\r\n    \"rhino-documentation-001_0\": 0.87612194\r\n  },\r\n  \"priorityPoints\": {\r\n    \"\": 0\r\n  },\r\n  \"severityPoints\": {\r\n    \"\": 0\r\n  },\r\n  \"aboveOptimalRate\": 0.0,\r\n  \"aboveOptimalCount\": 0,\r\n  \"belowOptimalRate\": 100.0,\r\n  \"belowOptimalCount\": 1,\r\n  \"averageTestTime\": \"00:00:52.5673164\",\r\n  \"totalTimeouts\": \"00:00:00\",\r\n  \"loadTimeouts\": \"00:00:00\",\r\n  \"elementTimeouts\": \"00:00:00\",\r\n  \"severity\": 0,\r\n  \"priority\": 0,\r\n  \"tolerance\": 0.0\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                    |Type     |Description                                                                                   |\r\n|------------------------|---------|----------------------------------------------------------------------------------------------|\r\n|key                     |string   |The unique identifier of this _**Rhino Test Run**_.                                           |\r\n|actual                  |boolean  |The actual result of this _**Rhino Test Run**_. ```true``` for pass, ```false``` for fail.    |\r\n|reasonPhrase            |string   |The reason of why this _**Rhino Test Run**_ failed.                                           |\r\n|title                   |string   |The title of this _**Rhino Test Run**_.                                                       |\r\n|start                   |date+time|The start time of this _**Rhino Test Run**_.                                                  |\r\n|end                     |date+time|The start time of this _**Rhino Test Run**_.                                                  |\r\n|runTime                 |time     |The run time (total) of this _**Rhino Test Run**_.                                            |\r\n|[testCases](#test-cases)|array    |A collection of _**Rhino Test Case**_ executed under this  _**Rhino Test Run**_.              |\r\n|totalSteps              |number   |The total steps number of this _**Rhino Test Case**_.                                         |\r\n|totalIterations         |number   |The total iterations number of this _**Rhino Test Run**_.                                     |\r\n|totalInconclusive       |number   |The total inconclusive tests number of this _**Rhino Test Run**_.                             |\r\n|successRate             |double   |The success rate of this _**Rhino Test Run**_.                                                |\r\n|qualityRank             |double   |The quality rank of this _**Rhino Test Run**_.                                                |\r\n|link                    |string   |The link pointing to this _**Rhino Test Run**_ if you are using any ALM connector.            |\r\n|performancePoints       |object   |The performance points of this _**Rhino Test Run**_, aggregated test iteration execution time.|\r\n|priorityPoints          |object   |The priority points of this _**Rhino Test Run**_, priority rank per Rhino Test Case.          |\r\n|severityPoints          |object   |The severity points of this _**Rhino Test Run**_, severity rank per Rhino Test Case.          |\r\n|aboveOptimalRate        |double   |The rate of tests which their running time is above the optimal running time threshold.       |\r\n|aboveOptimalCount       |number   |The number of tests which their running time is above the optimal running time threshold.     |\r\n|belowOptimalRate        |double   |The rate of tests which their running time is below the optimal running time threshold.       |\r\n|belowOptimalCount       |number   |The number of tests which their running time is below the optimal running time threshold.     |\r\n|totalTests              |number   |The total tests number of this _**Rhino Test Run**_.                                          |\r\n|totalSteps              |number   |The total steps number of this _**Rhino Test Run**_.                                          |\r\n|totalPass               |number   |The total passed tests number of this _**Rhino Test Run**_.                                   |\r\n|averageTestTime         |double   |The average individual test time of this _**Rhino Test Run**_.                                |\r\n|totalTimeouts           |time     |The total time spent on timeouts for this _**Rhino Test Run**_.                               |\r\n|loadTimeouts            |time     |The total time spent on page load timeouts for this _**Rhino Test Run**_.                     |\r\n|elementTimeouts         |time     |The total time spent on elements search timeouts for this _**Rhino Test Run**_.               |\r\n|severity                |number   |The severity level of this _**Rhino Test Run**_.                                              |\r\n|priority                |number   |The priority level of this _**Rhino Test Run**_.                                              |\r\n|tolerance               |double   |The tolerance level of this _**Rhino Test Run**_.                                             |\r\n\r\n#### Test Cases\r\n|Name                       |Type     |Description                                                                                                                    |\r\n|---------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------|\r\n|identifier                 |string   |The unique identifier of this _**Rhino Test Case*_.                                                                            |\r\n|key                        |string   |The _**Rhino Test Case*_ ID.                                                                                                   |\r\n|testSuite                  |string   |The ID of the test suite which test belongs to.                                                                                |\r\n|testRunKey                 |string   |The unique identifier of the test run which runs under.                                                                        |\r\n|scenario                   |string   |The title this _**Rhino Test Case*_.                                                                                           |\r\n|reasonPhrase               |string   |The reason of why this _**Rhino Test Case**_ failed.                                                                           |\r\n|actual                     |boolean  |The actual result of this _**Rhino Test Case**_. ```true``` for pass, ```false``` for fail.                                    |\r\n|[steps](#steps)            |array    |A collection of _**Rhino Test Step**_ executed under this  _**Rhino Test Case**_.                                              |\r\n|totalSteps                 |number   |The total steps number of this _**Rhino Test Case**_.                                                                          |\r\n|iteration                  |number   |The iteration number of this _**Rhino Test Case**_. Iterations are created when test run on data source or on multiple drivers.|\r\n|dataSource                 |object   |The local data source (iteration will be created for each data row) of this _**Rhino Test Case**_.                             |\r\n|modelEntries               |object   |A collection of _**Rhino Model**_ used by this _**Rhino Test Case**_.                                                          |\r\n|priority                   |number   |The priority level of this _**Rhino Test Case**_.                                                                              |\r\n|severity                   |number   |The severity level of this _**Rhino Test Case**_.                                                                              |\r\n|tolerance                  |double   |The tolerance level of this _**Rhino Test Case**_.                                                                             |\r\n|passedOnAttempt            |number   |On which attempt (when retry) the test has passed. The value 0 will be given if the test failed.                               |\r\n|qualityRank                |double   |The quality rank of this _**Rhino Test Case**_.                                                                                |\r\n|inconclusive               |Boolean  |If set to true, this test will be marked with warning when fails.                                                              |\r\n|start                      |date+time|The start time of this _**Rhino Test Case**_.                                                                                  |\r\n|end                        |date+time|The start time of this _**Rhino Test Case**_.                                                                                  |\r\n|runTime                    |time     |The run time (total) of this _**Rhino Test Case**_.                                                                            |\r\n|[environment](#environment)|object   |The automation environment data state (parameters current value) from Rhino Server State.                                      |\r\n\r\n#### Steps\r\n|Name        |Type     |Description                                                                                |\r\n|------------|---------|-------------------------------------------------------------------------------------------|\r\n|identifier  |string   |The unique identifier of this _**Rhino Test Step*_.                                        |\r\n|testCase    |string   |The parent test case identifier.                                                           |\r\n|action      |string   |The test action (i.e. go to URL {https://www.foo.io}).                                     |\r\n|command     |string   |The command used for this action (plugin command).                                         |\r\n|expected    |string   |The expected result of this _**Rhino Test Step*_.                                          |\r\n|actual      |boolean  |The actual result of this _**Rhino Test Case**_. ```true``` for pass, ```false``` for fail.|\r\n|reasonPhrase|string   |The reason of why this _**Rhino Test Case**_ failed.                                       |\r\n|link        |string   |The link pointing to this _**Rhino Test Step**_ if you are using any ALM connector.        |\r\n|runTime     |time     |The run time (total) of this _**Rhino Test Step**_.                                        |\r\n\r\n#### Environment\r\n|Name             |Type  |Description                                                                                                                  |\r\n|-----------------|------|-----------------------------------------------------------------------------------------------------------------------------|\r\n|applicationParams|object|The application parameters - Gravity Environment parameters, available for all runs. Will only reset when restart the server.|\r\n|applicationParams|object|The session parameters - Gravity Environment parameters, available for a single runs.  Will reset when run is completed.     |\r\n|macorParams      |object|The macro parameters - Gravity Macro parameters, available for a single runs.  Will reset when run is completed.             |\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided.            |\r\n|404 |Not Found, the _**Rhino Configuration**_ was not found.             |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Configuration",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Collection (all configurations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26017a26-9fe7-4b57-b3e9-da055419fdfa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}"
									]
								},
								"description": "Runs an existing _**Rhino Test Case**_ collection and returns _**Rhino Test Run**_ object. The execution will be done on all configurations attached to this collection.\r\n\r\n```\r\nGET /api/v3/rhino/collections/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                          |\r\n|-------------|------|-------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Collection**_.|\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Collection**_ was not provided.               |\r\n|404 |Not Found, the _**Rhino Collection**_ was not found.                |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Collection (all configurations)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/collections/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"collections",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "691591ef-b7f8-40c9-aa47-12fe56a5758a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Runs an existing _**Rhino Test Case**_ collection and returns _**Rhino Test Run**_ object.\r\n\r\n```\r\nGET /api/v3/rhino/collections/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Collection**_.   |\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                                         |\r\n|----|------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.                |\r\n|400 |Bad Request, _**Rhino Collection**_ or  _**Rhino Configuration**_ were not provided.|\r\n|404 |Not Found, the _**Rhino Collection**_ or  _**Rhino Configuration**_ were not found. |\r\n|500 |Fail, the server encountered an unexpected error.                                   |"
							},
							"response": [
								{
									"name": "Run by Collection (one configuration)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"collections",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Configurations - Unattached",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a60d040b-cb6b-498d-88bb-4fbf3e2f69e5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"testsRepository\": [\r\n      \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n      {\r\n        \"driver\": \"ChromeDriver\",\r\n        \"driverBinaries\": \"{{rhino_drivers}}\"\r\n      }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n      \"password\": \"{{rhino_password}}\",\r\n      \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n      \"maxParallel\": 1,\r\n      \"failOnException\": false,\r\n      \"optimalThreshold\": 3,\r\n      \"qualityThreshold\": 0,\r\n      \"toleranceThreshold\": 0,\r\n      \"priority\": 0,\r\n      \"severity\": 0,\r\n      \"errorOnExitCode\": 0,\r\n      \"elementSearchingTimeout\": 15000,\r\n      \"pageLoadTimeout\": 60000,\r\n      \"retrunExceptions\": true,\r\n      \"returnPerformancePoints\": true,\r\n      \"returnEnvironment\": true,\r\n      \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n      \"keepOriginal\": false,\r\n      \"returnScreenshots\": true,\r\n      \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n      \"reporters\": [\r\n        \"reporter_basic\",\r\n        \"reporter_warehouse\"\r\n      ],\r\n      \"archive\": false,\r\n      \"localReport\": true,\r\n      \"addGravityData\": true\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations"
									]
								},
								"description": "Executes a collection of _**Rhino Configuration**_ without saving the configuration under Rhino Server State.\r\n\r\n```\r\nPOST /api/v3/rhino/configurations/execute\r\n```\r\n\r\n### Request Fields\r\nA collection of _**Rhino Configuration**. Each item in the request body follows the same format as _**Get Configuration**_ response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n    {\r\n        \"name\": \"Rhino Automation - Chrome\",\r\n        \"testsRepository\": [ ],\r\n        \"driverParameters\": [\r\n            {\r\n                \"driver\": \"ChromeDriver\",\r\n                \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n            }\r\n        ],\r\n        \"dataSource\": [],\r\n        \"models\": [ ],\r\n        \"connector\": \"connector_text\",\r\n        \"gravityEndpoint\": \"\",\r\n        \"authentication\": {\r\n            \"password\": \"<rhino_user>\",\r\n            \"userName\": \"<rhino_password>\"\r\n        },\r\n        \"engineConfiguration\": {\r\n            \"maxParallel\": 1,\r\n            \"failOnException\": false,\r\n            \"optimalThreshold\": 3.0,\r\n            \"qualityThreshold\": 0.0,\r\n            \"toleranceThreshold\": 0.0,\r\n            \"priority\": 0,\r\n            \"severity\": 0,\r\n            \"errorOnExitCode\": 0,\r\n            \"elementSearchingTimeout\": 15000,\r\n            \"pageLoadTimeout\": 60000,\r\n            \"retrunExceptions\": true,\r\n            \"returnPerformancePoints\": true,\r\n            \"returnEnvironment\": true,\r\n            \"terminateOnAssertFailure\": false\r\n        },\r\n        \"screenshotsConfiguration\": {\r\n            \"keepOriginal\": false,\r\n            \"returnScreenshots\": false,\r\n            \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n            \"onExceptionOnly\": false\r\n        },\r\n        \"reportConfiguration\": {\r\n            \"reportOut\": \"<path_to_reports_folder>\",\r\n            \"logsOut\": \"<path_to_logs_folder>\",\r\n            \"reporters\": null,\r\n            \"connectionString\": null,\r\n            \"dataProvider\": null,\r\n            \"archive\": false,\r\n            \"localReport\": true,\r\n            \"addGravityData\": true\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Rhino Automation - Firefox\",\r\n        \"testsRepository\": [ ]\r\n    ...\r\n]\r\n```\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Configurations - Unattached",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"testsRepository\": [\r\n      \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n      {\r\n        \"driver\": \"ChromeDriver\",\r\n        \"driverBinaries\": \"{{rhino_drivers}}\"\r\n      }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n      \"password\": \"{{rhino_password}}\",\r\n      \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n      \"maxParallel\": 1,\r\n      \"failOnException\": false,\r\n      \"optimalThreshold\": 3,\r\n      \"qualityThreshold\": 0,\r\n      \"toleranceThreshold\": 0,\r\n      \"priority\": 0,\r\n      \"severity\": 0,\r\n      \"errorOnExitCode\": 0,\r\n      \"elementSearchingTimeout\": 15000,\r\n      \"pageLoadTimeout\": 60000,\r\n      \"retrunExceptions\": true,\r\n      \"returnPerformancePoints\": true,\r\n      \"returnEnvironment\": true,\r\n      \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n      \"keepOriginal\": false,\r\n      \"returnScreenshots\": true,\r\n      \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n      \"reporters\": [\r\n        \"reporter_basic\",\r\n        \"reporter_warehouse\"\r\n      ],\r\n      \"archive\": false,\r\n      \"localReport\": true,\r\n      \"addGravityData\": true\r\n    }\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/rhino/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62dd36af-290f-4895-81f0-6563e1d10a00",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Runs _**Rhino Spec**_ directly from the request body.\r\n\r\n```\r\nPOST /api/v3/rhino/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as _**Get Test Case Collection**_ response content.\r\n\r\n### Request Example\r\nPlease see below for a typical request:\r\n\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided.            |\r\n|404 |Not Found, the _**Rhino Configuration**_ was not found.             |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Collection (one configuration)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Rhino API**_ to run Rhino Specs.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e348f365-62c2-4c2c-afb4-686dc0f641c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5ff2755-0953-49f3-9d50-049282e21c34",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #1: Run by Configuration - No Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e554c1d7-0ce0-4fbe-94fc-8328e3a185f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #2: Create Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b4f328-ee0e-4757-89ef-fb68f0398e07",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('models_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"name\": \"Students Input Models\",\n    \"entries\": [\n      {\n        \"name\": \"search students text-box\",\n        \"value\": \"#SearchString\",\n        \"type\": \"css selector\",\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\n      },\n      {\n        \"name\": \"search students button\",\n        \"value\": \"//input[@id='SearchButton']\",\n        \"comment\": \"Search students button on the top center panel under students page.\"\n      }\n    ],\n    \"context\": {\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #3: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9710451d-cc50-42c7-a5df-5163f1cf96a8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [\r\n    \"{{models_id}}\"\r\n  ],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #4: Run by Collection (one configuration) - Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d68f9a4e-f1de-49b0-ac75-dc082ba78119",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {search students text-box}\r\n4. click on {search students button}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@students-table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #5: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50bd9275-ba42-4bb5-a48f-94ad1ce2403e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #6: Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9063442d-22f0-4a3e-926f-9e896f9b3718",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search-text-box}\n4. click on {@search-button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[5] assert {count} on {@students-table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\n\t\t\"search-button\":\"#SearchButton\",\n\t\t\"students-table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #7: Run by Collection (one configuration) - Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f83938f7-4e06-4748-a079-e518b241efd9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods run automation specs and get Rhino Result object.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ccdd59ae-fa9c-4bf8-8b53-4628dc48d560",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c4ab08dd-8d75-408d-a215-0d39af50b6ec",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Plugins",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create or Update Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c276579-f7bd-4fb8-a90b-e87f85ccfd2a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                         |\r\n|----------|----------------------------------------------------|\r\n|department|Department name. Will be used for searching courses.|\r\n|total     |Total courses. Will be used asserting results.      |\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Creates new or Updates existing one or more _**Rhino Plugin**_.\r\n\r\n```\r\nPOST /api/v3/plugins?prvt=(false|true)\r\n```\r\n\r\n|Name|Type   |Description                                                                                         |\r\n|----|-------|----------------------------------------------------------------------------------------------------|\r\n|prvt|boolean|Set to true in order to create the plugin as a private plugin available only to the user created it.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Plugin](#get-plugin) response content.\r\n\r\n### Request Example\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id] SearchCourse\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                             |\r\n|----|--------------------------------------------------------------------------------------------------------|\r\n|200 |Success, some of the _**Plugin(s)**_ were not created and reasons were returned as part of the response.|\r\n|201 |Created, the _**Plugin(s)**_ were created returned as part of the response.                             |\r\n|500 |Fail, the server encountered an unexpected error.                                                       |"
							},
							"response": [
								{
									"name": "Create Plugins - Private",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
										},
										"url": {
											"raw": "{{endpoint}}/plugins?prvt=true",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											],
											"query": [
												{
													"key": "prvt",
													"value": "true"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Plugins - Public",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
										},
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "194c3e52-0a7a-4bb6-ad8e-8d146d7bb975",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Returns a list of available _**Rhino Plugins**_ content.\r\n\r\n```\r\nGET /api/v3/plugins\r\n```\r\n\r\n### Response Content\r\nThe response body is an array of specs follows the same format as [Get Plugin](#get-plugin) response content.  \r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id] SearchCourse\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Plugin**_ collection returned as part of the response.  |\r\n|404 |Not Found, no public plugins and no private plugins were found for the issuer.|\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Plugins",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Plugin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05fff06b-245b-46f4-9c62-d55d5af73d00",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								},
								"description": "Returns an existing _**Rhino Plugins**_ content.\r\n\r\n```\r\nGET /api/v3/plugins/:plugin_id\r\n```\r\n\r\n|Name     |Type  |Description                                                                                                |\r\n|---------|------|-----------------------------------------------------------------------------------------------------------|\r\n|plugin_id|string|The ID of the _**Rhino Plugin**_ this is the unique name of the plugin as given under \"test-id\" annotation.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n> The response a Rhino Plugin Spec of media type `text/plain`.\r\n> The fields are annotated following Rhino's language text format.\r\n\r\n#### Mandatory Fields\r\n|Name         |Type  |Description                                        |\r\n|-------------|------|---------------------------------------------------|\r\n|test-id      |text  |The **unique name** of the plugin.                 |\r\n|test-scenario|text  |The title of the plugin.                           |\r\n|test-actions |text  |Line separated list of the test actions to execute.|\r\n|test-examples|object|At least one example of how to call your plugin.   |\r\n\r\nThe following system fields are sometimes included in the response:\r\n\r\n#### Optional Fields\r\n|Name                 |Type  |Description                                                                   |\r\n|---------------------|------|------------------------------------------------------------------------------|\r\n|test-expected-results|text  |Line separated list of the test expected results to execute.                  |\r\n|test-parameters      |object|A list of parameters including a short description of what the parameter does.|\r\n\r\n### Response Codes\r\n|Code|Description                                                      |\r\n|----|-----------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Plugin**_ returned as part of the response.|\r\n|404 |Not Found, the provided _**Rhino Plugin**_ was not found.        |\r\n|500 |Fail, the server encountered an unexpected error.                |"
							},
							"response": [
								{
									"name": "Get Plugin",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/plugins/SearchStudent",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins",
												"SearchStudent"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Plugin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "495227cf-d14d-4918-b936-33c92c846bfc",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								},
								"description": "Deletes an existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations/:plugin_id\r\n```\r\n\r\n|Name     |Type  |Description                                                                                                |\r\n|---------|------|-----------------------------------------------------------------------------------------------------------|\r\n|plugin_id|string|The ID of the _**Rhino Plugin**_ this is the unique name of the plugin as given under \"test-id\" annotation.|\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                                                         |\r\n|----|------------------------------------------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugin**_ was deleted.                                        |\r\n|404 |Not Found, the _**Rhino Plugin**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                   |"
							},
							"response": [
								{
									"name": "Delete Plugin",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/plugins/SearchStudent",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins",
												"SearchStudent"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b6df0da-9c9c-494f-84b1-261f174242c8",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Plugins",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Rhino API**_ to create Rhino Plugins.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67463cac-a163-4e7a-80fd-4e0a0561a949",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf0294ff-b2e9-4c07-90c9-49315f06f563",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f793f6b-aca2-4880-8f0f-affae189d5c2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Plugins Repeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20b76eb9-21d8-4e51-8462-91a011cbd717",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Plugins - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae343525-ae6a-44e6-bd51-762731398cc6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        PrivateCircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Get Plugin - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae82877f-35da-4bb6-8474-1e399dd7f8c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Get Plugin - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "388fda6a-6635-43fa-99c5-97273f38a574",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Get Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e14fd26-bd26-4bbb-8409-93b38ae4c94d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Plugin - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e9c7634-dc59-4117-a816-85e7c4c37deb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/NotAPlugin",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"NotAPlugin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Delete Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1113e924-b0a9-416a-a405-68f197e7e5bf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Delete Plugin - Private Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d4a5664-7b07-4e54-b67a-455d5ddbfb53",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0adb7fc1-9ae1-4be5-9f07-bc18d50d4593",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 7\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('7');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Delete Plugin - Positive with Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e582458f-77b4-42b2-af3b-3b67a0bcbaea",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Delete Plugin - Positive without Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ff28fb9-19b5-4388-afc1-7ce16824324c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchCourses",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchCourses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "413d4ebe-32ea-4deb-b569-0d87e270bf98",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 5\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Delete All Plugins - No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3b7fd69-bdbf-42b6-84d8-066023a6639f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17832829-bc56-4986-b58c-48a162f21482",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 3\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12826462-3851-4335-a130-f6ec8faba64c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Create Plugins Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02a6183c-2ddf-45f8-bd55-47ae1fdd470a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        Private2CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        Private2SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Delete All Plugins - Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffb5e1bb-e9d9-459e-9788-1a46091bac24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Get Plugins - Positive User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4124c2a9-d7b6-4ebb-bb01-a0e60388bacd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Delete All Plugins - Credentials User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ace8b0f3-6056-4513-8ee9-9dc252fe2cab",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04281448-ff4b-424a-a1bb-f1a0fa1db903",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f851f27f-9e1f-49f7-a42b-799165639c99",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca5f2eed-962c-4b8a-856d-89c219b430c1",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06a7cb37-5530-4d4c-8c68-558f7b90ffae",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5ea08ca-1d1c-4c26-b404-2065264b00f2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{rhino_password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{rhino_user}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f63e8ffa-a8f2-4749-80df-23228a4a8367",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d94baaef-da9b-4ab8-918d-51065bd2c569",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eefb76db-8ad2-472c-9ff8-c9694f5f0527",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecbffc11-885d-41ab-b77f-59fe7df11829",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "769cce90-883b-402c-8ed9-b78c4e901ae9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. search student {{$ --first_name:Carson --last_name:Alexander}}\r\n5. wait for {3000} milliseconds\r\n6. close browser",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0a3e42b-e84a-4bd1-97cf-b3b7d2be5b5c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. search student {{$ --first_name:Carson --last_name:Alexander}}\r\n5. wait for {3000} milliseconds\r\n6. close browser",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb1341f-5037-43dd-b33a-15fd4618c11e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Delete all configurations"
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2996e406-b738-46d4-a16c-a057688daeb3",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Plugins**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0a6cbca0-2763-43c3-b707-6399fd30b442",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "810763ac-a8b2-4633-8bcb-e03196a87bb2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Logs & Analysis",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Get Logs",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/logs/20200913",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913"
									]
								},
								"description": "Returns an existing _**Automation Log**_.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/configuration/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n\r\n#### Response Content\r\n> The response is an array of log entries of media type ```text/plain```.\r\n> Log entries are separated by an empty line.\r\n\r\n```\r\nDBG - 2020-07-08 07:31:29.092\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : DEBUG\r\n    TimeStamp  : 2020-07-08 07:31:29.092\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : [OnBeforeTestExecution] does not need an implementation for this connector\r\n\r\nAutomation.Kdd.Agent Information: 0 : INF - 2020-07-08 07:31:29.094\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : INFO\r\n    TimeStamp  : 2020-07-08 07:31:29.094\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : executing 'Login'\r\n\r\nAutomation.Kdd.Agent Information: 0 : [GoToUrl]; argument [https://gravitymvctestapplication.azurewebsites.net/] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Username]; argument [userName] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Password]; argument [password] executed\r\nAutomation.Kdd.Agent Information: 0 : [Click]; element [//button[contains(.,'Log In')]] executed\r\nAutomation.Kdd.Agent Information: 0 : [WaitForUrl] executed\r\nAutomation.Kdd.Agent Information: 0 : [Assert]; argument [{{$ --url --match:Dashboard}}] executed\r\nAutomation.Kdd.Agent Information: 0 : [CloseBrowser] executed\r\nAutomation.Kdd.Agent Information: 0 : [web-automation]; argument [1/1] executed\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Logs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/logs/20200913",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"logs",
												"20200913"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Logs - Last Number of Lines",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/logs/20200913/size/500",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913",
										"size",
										"500"
									]
								},
								"description": "Returns an existing _**Automation Log**_ tail, by specific size.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/size/:size\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n|size            |number|A fixed number of lines from the end of the log upwards.                                   |\r\n\r\n#### Response Content\r\n> The response is an array of log entries of media type ```text/plain```.\r\n> Log entries are separated by an empty line.\r\n\r\n```\r\nDBG - 2020-07-08 07:31:29.092\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : DEBUG\r\n    TimeStamp  : 2020-07-08 07:31:29.092\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : [OnBeforeTestExecution] does not need an implementation for this connector\r\n\r\nAutomation.Kdd.Agent Information: 0 : INF - 2020-07-08 07:31:29.094\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : INFO\r\n    TimeStamp  : 2020-07-08 07:31:29.094\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : executing 'Login'\r\n\r\nAutomation.Kdd.Agent Information: 0 : [GoToUrl]; argument [https://gravitymvctestapplication.azurewebsites.net/] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Username]; argument [userName] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Password]; argument [password] executed\r\nAutomation.Kdd.Agent Information: 0 : [Click]; element [//button[contains(.,'Log In')]] executed\r\nAutomation.Kdd.Agent Information: 0 : [WaitForUrl] executed\r\nAutomation.Kdd.Agent Information: 0 : [Assert]; argument [{{$ --url --match:Dashboard}}] executed\r\nAutomation.Kdd.Agent Information: 0 : [CloseBrowser] executed\r\nAutomation.Kdd.Agent Information: 0 : [web-automation]; argument [1/1] executed\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Logs - Last Number of Lines",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/logs/20200913/size/500",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"logs",
												"20200913",
												"size",
												"500"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Logs - Download",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/logs/20200913/download",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913",
										"download"
									]
								},
								"description": "Downloads an existing _**Automation Log**_ as _**zip**_ file.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/download\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n\r\n#### Response Content\r\n> The response is a file of media type ```application/zip```.\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": []
						}
					],
					"description": "This guide explains how to access and use _**Automation Logs API**_ to get logs and analysis information about the automation runs and tests.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c554d82a-90f7-4d13-8a66-ec9467d60fcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d30ef45-744d-48d8-9a08-64d0abe899a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about automation logs which were created during the automation run.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "771b0101-f525-4e1a-89c2-228feb4bd457",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2294f9a3-5403-4d1d-95fe-07cbc19eaaf1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Debug Automation",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Send Gravity API Web Automation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b05a9d5-2c75-4c0b-8d0a-af86207b09c6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								},
								"description": "> Note, the API used for these requests is the underline [Gravity API](https://github.com/gravity-api?tab=repositories).\r\n\r\n## Execute Gravity API Request\r\nReturns an _**Orbit Response**_ object.\r\n\r\n```\r\nGET /api/v3/debug\r\n```\r\n\r\n### Request Content\r\nPlease see below for a typical request:\r\n\r\n```js\r\n{\r\n  \"DataSource\": null,\r\n  \"Authentication\": {\r\n    \"Password\": \"rhinoPassword\",\r\n    \"UserName\": \"rhinoUserName\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"MaxParallel\": 1,\r\n    \"FailOnException\": false,\r\n    \"OptimalThreshold\": 3.0,\r\n    \"QualityThreshold\": 0.0,\r\n    \"ToleranceThreshold\": 0.0,\r\n    \"Priority\": 0,\r\n    \"Severity\": 0,\r\n    \"ErrorOnExitCode\": 0,\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000,\r\n    \"RetrunExceptions\": true,\r\n    \"ReturnPerformancePoints\": true,\r\n    \"ReturnEnvironment\": true,\r\n    \"TerminateOnAssertFailure\": false\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\"\r\n  },\r\n  \"DriverParams\": \"{\\r\\n  \\\"driver\\\": \\\"ChromeDriver\\\",\\r\\n  \\\"driverBinaries\\\": \\\"D:\\\\\\\\automation-env\\\\\\\\web-drivers\\\"\\r\\n}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"#SearchButton\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThe following system fields must be always included in the request:\r\n\r\n#### General\r\n|Name                                                  |Type  |Description                                                                  |\r\n|------------------------------------------------- ----|------|-----------------------------------------------------------------------------|\r\n|[authentication](#authentication)                     |object|A collection of extraction objects returned by Gravity API.                  |\r\n|[engineConfiguration](#engine-configuration)          |object|A set of data, based on the request sent to Gravity API.                     |\r\n|[screenshotsConfiguration](#screenshots-configuration)|object|A set of data, based on the request sent to Gravity API.                     |\r\n|driverParams                                          |string|Parameters which represents the target platforms on which the tests will run.|\r\n|[actions](#gravity-action)                            |array |A collection of _**Gravity Plugin**_ to execute by this request.             |\r\n\r\n#### Authentication\r\n|Name    |Type  |Description                 |\r\n|--------|------|----------------------------|\r\n|userName|string|A valid Rhino API user name.|\r\n|password|string|A valid Rhino API password. |\r\n\r\n#### Engine Configuration\r\n|Name                    |Type   |Description                                                                                                            |\r\n|------------------------|-------|-----------------------------------------------------------------------------------------------------------------------|\r\n|maxParallel             |number |The maximum number of tests that will be executed in parallel.                                                         |\r\n|failOnException         |boolean|When set to true, test cases will fail if exceptions were thrown during test regardless of assertions passed or failed.|\r\n|optimalThreshold        |decimal|Any test which violates this threshold (in minutes), will be marked as non-optimal.                                    |\r\n|qualityThreshold        |decimal|Any test which violates this threshold (in percents), will be marked as failed.                                        |\r\n|toleranceThreshold      |decimal|Any test which falls within this threshold (in percents), will be marked as warning when fail.                         |\r\n|priority                |number |All tests with priority lower than this number will be marked as warning when fail.                                    |\r\n|severity                |number |All tests with severity lower than this number will be marked as warning when fail.                                    |\r\n|errorOnExitCode         |number |The error code (console application error code) which will cause the CI/CD process to fail.                            |\r\n|elementSearchingTimeout |number |The timeout in millisecond when searching for elements.                                                                |\r\n|pageLoadTimeout         |number |The timeout in millisecond when loading a page or application.                                                         |\r\n|retrunExceptions        |boolean|When set to false, exceptions will not be returned by Gravity engine. This might affect the tests results.             |\r\n|returnPerformancePoints |boolean|When set to false, performance data will not be returned by Gravity engine. This might affect the tests results.       |\r\n|returnEnvironment       |boolean|When set to true, will return the current Gravity Environment parameters.                                              |\r\n|terminateOnAssertFailure|boolean|When set to true, automation will stop if assertion any assertion action failed.                                       |\r\n\r\n#### Screenshots Configuration\r\n|Name             |Type   |Description                                                                                               |\r\n|-----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|keepOriginal     |boolean|When set to true, will keep the original file created by Gravity engine, when creating a new Rhino report.|\r\n|returnScreenshots|boolean|When set to false, screenshots will be returned from Gravity engine.                                      |\r\n|screenshotsOut   |decimal|The directory in which to save automatic screenshots.                                                     |\r\n\r\n#### Gravity Action\r\n|Name                   |Type  |Description                                                                                                                                              |\r\n|-----------------------|------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|actionType             |string|_**Gravity Plugin**_ name (i.e. Click or SendKeys).                                                                                                      |\r\n|Locator                |string|Elements locator type (i.e. Xpath or CssSelector).                                                                                                       |\r\n|Reference              |number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array (read only property).                                           |\r\n|RepeatReference        |number|A zero based index of the _**Gravity Plugin**_ n the _**Repeat**_ plugin actions array (read only property).                                             |\r\n|ElementAttributeToActOn|string|The element attribute name on which this _**Gravity Plugin**_ will act (i.e. href or class).                                                             |\r\n|ElementToActOn         |string|The element on which this _**Gravity Plugin**_ will act. This will be the locator value (i.e. if the locator type is CssSelector, it will be #myElement).|\r\n|RegularExpression      |string|A regular expression to apply on attribute or inner text values of an element, before the _**Gravity Plugin**_ is executed.                              |\r\n|Argument               |string|An argument to pass along with this _**Gravity Plugin**_ (i.e. if the action is SendKeys the argument can be \"hello world!\".                             |\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n{\r\n  \"extractions\": [\r\n    {\r\n      \"key\": \"1\",\r\n      \"entities\": [\r\n        {\r\n          \"entityContentEntries\": {\r\n            \"actual\": \"3\",\r\n            \"expected\": \"0\",\r\n            \"method\": \"gt\",\r\n            \"assertion\": \"true\"\r\n          }\r\n        }\r\n      ],\r\n      \"orbitSession\": {\r\n        \"sessionsId\": \"2a0d998832ff9bd2f859a16a9664cb37\",\r\n        \"machineName\": \"DESKTOP-G1MC8H7\",\r\n        \"machineIp\": \"192.168.1.21\"\r\n      }\r\n    },\r\n    {\r\n      \"key\": \"0\",\r\n      \"entities\": [\r\n        {\r\n          \"entityContentEntries\": {\r\n            \"actual\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n            \"expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n            \"method\": \"match\",\r\n            \"assertion\": \"true\"\r\n          }\r\n        }\r\n      ],\r\n      \"orbitSession\": {\r\n        \"sessionsId\": \"2a0d998832ff9bd2f859a16a9664cb37\",\r\n        \"machineName\": \"DESKTOP-G1MC8H7\",\r\n        \"machineIp\": \"192.168.1.21\"\r\n      }\r\n    }\r\n  ],\r\n  \"orbitRequest\": {\r\n    \"serializedRequest\": null,\r\n    \"serializedResponse\": null,\r\n    \"exceptions\": [],\r\n    \"performancePoints\": [\r\n      {\r\n        \"time\": 3659.9477,\r\n        \"actionReference\": 0,\r\n        \"action\": \"GoToUrl\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 383.979,\r\n        \"actionReference\": 1,\r\n        \"action\": \"Assert\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 352.1497,\r\n        \"actionReference\": 2,\r\n        \"action\": \"CloseAllChildWindows\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 469.0115,\r\n        \"actionReference\": 3,\r\n        \"action\": \"SendKeys\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 648.0932,\r\n        \"actionReference\": 4,\r\n        \"action\": \"Click\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 3341.0645,\r\n        \"actionReference\": 5,\r\n        \"action\": \"Wait\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 372.835,\r\n        \"actionReference\": 6,\r\n        \"action\": \"Assert\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 15435.1959,\r\n        \"actionReference\": 7,\r\n        \"action\": \"RegisterParameter\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 137.4526,\r\n        \"actionReference\": 8,\r\n        \"action\": \"CloseBrowser\",\r\n        \"repeatReference\": 0\r\n      }\r\n    ],\r\n    \"screenshots\": [\r\n      {\r\n        \"actionReference\": 7,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090121559-7-RegisterParameter.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 6,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090106121-6-Assert.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 5,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090105752-5-Wait.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 4,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090102338-4-Click.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 3,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090101706-3-SendKeys.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 2,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090101249-2-CloseAllChildWindows.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 1,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090100860-1-Assert.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 0,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090100416-0-GoToUrl.png\"\r\n      }\r\n    ],\r\n    \"userName\": \"automation@rhino.api\",\r\n    \"startTime\": \"2020-08-21T12:00:52.0187856+03:00\",\r\n    \"endTime\": \"2020-08-21T12:01:22.0720038+03:00\",\r\n    \"totalRunTime\": 30053,\r\n    \"responseSize\": 5550,\r\n    \"requestSize\": 4794,\r\n    \"environment\": {\r\n      \"applicationParams\": {},\r\n      \"macroParams\": {},\r\n      \"sessionParams\": {\r\n        \"first_name\": \"John\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                         |Type  |Description                                                |\r\n|-----------------------------|------|-----------------------------------------------------------|\r\n|[extractions](#extraction)   |array |A collection of extraction objects returned by Gravity API.|\r\n|[orbitRequest](#Orbit-request)|object|A set of data, based on the request sent to Gravity API.  |\r\n\r\n#### Extraction\r\n|Name                          |Type  |Description                                                                  |\r\n|------------------------------|------|-----------------------------------------------------------------------------|\r\n|key                           |string|The unique identifier for this extraction entry.                             |\r\n|[entities](#entity)           |array |A collection of information which describes an entity (as map or dictionary).|\r\n|[orbitSession](#orbit-session)|object|Gravity API session information.                                             |\r\n\r\n#### Entity\r\n|Name   |Type  |Description                                                |\r\n|-------|------|-----------------------------------------------------------|\r\n|content|object|A collection of Key/Value which describes an entity schema.|\r\n\r\n#### Orbit Session\r\n|Name       |Type   |Description                                                                |\r\n|-----------|-------|---------------------------------------------------------------------------|\r\n|sessionsId |string|Gravity API session ID. Will be the WebDriver session if WebDriver was used.|\r\n|machineName|string|The machine name under which this Gravity API session was executed.         |\r\n|machineIp  |string|The machine IP address under which this Gravity API session was executed.   |\r\n\r\n#### Orbit Request\r\n|Name                                   |Type     |Description                                                                                                       |\r\n|---------------------------------------|---------|------------------------------------------------------------------------------------------------------------------|\r\n|serializedRequest                      |string   |The serialized _**Web Automation**_ request sent by the client. _Will always be null due do privacy policies_.    |\r\n|serializedResponse                     |string   |The serialized _**Orbit Response**_ object returned by Gravity API. _Will always be null due do privacy policies_.|\r\n|[exceptions](#orbit-exception)         |array    |A collection of _**Orbit Exception**_ object thrown during execution.                                             |\r\n|[performancePoints](#performance-point)|array    |A collection of _**Orbit Performance Point**_ object.                                                             |\r\n|[screenshots](#gravity-screenshot)     |array    |A collection of _**Orbit Screenshot**_ object.                                                                    |\r\n|userName                               |string   |The user name used to execute this _**Web Automation**_ request.                                                  |\r\n|start                                  |date+time|The start time of this _**Web Automation**_.                                                                      |\r\n|end                                    |date+time|The end time of this _**Web Automation**_.                                                                        |\r\n|runTime                                |time     |The run time (total) of this _**Web Automation**_.                                                                |\r\n|responseSize                           |number   |Response size in KB of the _**Orbit Response**_ object returned by Gravity API.                                   |\r\n|requestSize                            |number   |Response size in KB of the _**Web Automation**_ object sent to Gravity API.                                       |\r\n|environment                            |object   |The run time (total) of this _**Web Automation**_.                                                                |\r\n|[environment](#environment)            |object   |The automation environment data state (parameters current value) from Rhino Server State.                         |\r\n\r\n#### Orbit Exception\r\n|Name           |Type  |Description                                                                                                        |\r\n|---------------|------|-------------------------------------------------------------------------------------------------------------------|\r\n|exception      |object|The thrown exception full stack information.                                                                       |\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ which throw the exception in the _**Web Automation**_ actions array.|\r\n|action         |string|The _**Gravity Plugin**_ which throw the exception (i.e. Click or SendKeys).                                       |\r\n|screenshot     |string|The full path of this exception screenshot (if taken).                                                             |\r\n|repeatReference|number|A zero based index of the _**Gravity Plugin**_ which throw the exception in the _**Repeat**_ plugin actions array. |\r\n|context        |object|A context for this exception which can hold an extra information.                                                  |\r\n\r\n#### Performance Point\r\n|Name           |Type  |Description                                                                              |\r\n|---------------|------|-----------------------------------------------------------------------------------------|\r\n|time           |double|The total run time of the _**Gravity Plugin**_ (i.e. Click or SendKeys).                 |\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array.|\r\n|action         |string|The _**Gravity Plugin**_ which throw the exception (i.e. Click or SendKeys).             |\r\n|repeatReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Repeat**_ plugin actions array. |\r\n\r\n#### Screenshot\r\n|Name           |Type  |Description                                                                              |\r\n|---------------|------|-----------------------------------------------------------------------------------------|\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array.|\r\n|comment        |string|Any text for describing the screenshot.                                                  |\r\n|type           |string|The image file type (i.e. PNG or JPG).                                                   |\r\n|location       |string|The full path of this exception screenshot (if taken).                                   |\r\n\r\n#### Environment\r\n|Name             |Type  |Description                                                                                                                  |\r\n|-----------------|------|-----------------------------------------------------------------------------------------------------------------------------|\r\n|applicationParams|object|The application parameters - Gravity Environment parameters, available for all runs. Will only reset when restart the server.|\r\n|applicationParams|object|The session parameters - Gravity Environment parameters, available for a single runs.  Will reset when run is completed.     |\r\n|macorParams      |object|The macro parameters - Gravity Macro parameters, available for a single runs.  Will reset when run is completed.             |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Orbit Response**_ was returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Send Gravity API Web Automation Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{\\r\\n  \\\"driver\\\": \\\"ChromeDriver\\\",\\r\\n  \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"\\r\\n}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/debug",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"debug"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Debug API**_ to simulate debugging of Rhino Spec.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "115c22a9-1e3f-4b75-9607-0c78ad35d99a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "42becd72-f832-44a9-af3d-3479ace42748",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Debug - Step #1 - Create - Go To Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "869eb4c7-955d-4a21-92a7-93147a1b7c1c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('session_id', jsonData.extractions[0].orbitSession.sessionsId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #2 - Assert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6982a7fc-a3c5-42d7-8fbb-4aa78975217f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #3 - Close All Child Windows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21e5cede-b561-484c-b737-9eed62fceafb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #4 - Send Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ace03f7c-b9cb-471b-8856-24733aad5cb1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #5 - Click",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af58ef80-5eb7-4694-8be4-326f790236b0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #6 - Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df90b07a-5771-418a-b3f5-ca117a5c3896",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #7 - Assert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "298241b3-8848-4425-88b4-dded0420d908",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #8 - Register Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c483982-687f-42e6-9731-05f763925578",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #9 - Close Browser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d1ad9d9-04cd-470b-b76c-d9b8999d4185",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DataSource\": null,\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"MaxParallel\": 1,\r\n    \"FailOnException\": false,\r\n    \"OptimalThreshold\": 3.0,\r\n    \"QualityThreshold\": 0.0,\r\n    \"ToleranceThreshold\": 0.0,\r\n    \"Priority\": 0,\r\n    \"Severity\": 0,\r\n    \"ErrorOnExitCode\": 0,\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000,\r\n    \"RetrunExceptions\": true,\r\n    \"ReturnPerformancePoints\": true,\r\n    \"ReturnEnvironment\": true,\r\n    \"TerminateOnAssertFailure\": false\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"{{rhino_images}}\"\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"CloseBrowser\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to simulate a debugging process of your automation and gets underline exceptions and extractions.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d58a7543-b023-4a43-8c07-00d8493b0721",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "57083cb4-989f-42f2-a6ed-6e1c869074eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{rhino_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{rhino_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c3211175-de6f-46a3-84cb-766b0dfc3aca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e2af65d2-a139-4889-8cfa-dfd9f280a2ea",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "89d31705-172e-48e4-9bed-9a1d950ddd38",
			"key": "endpoint",
			"value": "https://localhost:32780/api/v3"
		},
		{
			"id": "015f0d41-787d-487e-9104-3b18ac4b3b3f",
			"key": "rhino_password",
			"value": ""
		},
		{
			"id": "e4d82989-34bc-4e72-8644-02d4f429b652",
			"key": "rhino_drivers",
			"value": "http://localhost:4444/wd/hub"
		},
		{
			"id": "de6d1d16-b46b-4685-ad74-3f1d5fbb24b9",
			"key": "rhino_images",
			"value": "outputs/images"
		},
		{
			"id": "49cd6cff-47b2-4f1c-9809-814aa7cf69bf",
			"key": "rhino_user",
			"value": ""
		},
		{
			"id": "f6dd4f62-dead-428b-8109-28ab0ba57381",
			"key": "models_id",
			"value": "9645c03a-6ab1-422c-883b-d1d9ae6a3877"
		},
		{
			"id": "19f77fef-8fbd-49c8-b39a-d9fc6592eb71",
			"key": "collection_id",
			"value": "030230f0-7b84-4d0f-b0f4-c461abd2a379"
		},
		{
			"id": "634d51f7-b9a5-4209-b936-3d7c1b9471f1",
			"key": "configuration_id",
			"value": "cdfc307d-2317-46e5-8112-d8871574b470"
		},
		{
			"id": "4138c968-509a-43f8-a1cc-190e93f0b779",
			"key": "session_id",
			"value": "f7e910fa634880341214ae135b8e582d"
		}
	],
	"protocolProfileBehavior": {}
}