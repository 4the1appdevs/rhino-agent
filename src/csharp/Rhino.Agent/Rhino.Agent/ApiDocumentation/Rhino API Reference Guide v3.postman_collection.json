{
	"info": {
		"_postman_id": "d34fe3ca-4b41-4e54-8d8b-9e7f81e3a669",
		"name": "Rhino API Reference Guide v3",
		"description": "Learn how to access and use Rhinoâ€™s API to integrate automated testing frameworks, submit test results, and automate various other aspects of your applications via simple HTTP requests.\r\n\r\n# Reference\r\n\r\n***\r\n\r\n* Configurations\r\n* Test Cases\r\n* Page Models\r\n* Execution\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "One Time Setup",
			"item": [
				{
					"name": "Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83c588fa-d1b9-4b58-ace0-f983df3555d0",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b3105f8-eb1e-4be2-8876-da2a0fce32b8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Creates a new _**Rhino Configuration**_.\r\n\r\n```\r\nPOST /api/v3/configurations\r\n```\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Configuration](#get-configuration) response content.\r\n\r\n### Request Example\r\n```js\r\n{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"<rhino_user>\",\r\n    \"userName\": \"<rhino_password>\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                  |\r\n|----|---------------------------------------------------------------------------------------------|\r\n|201 |Success, the _**Configuration**_ created and identifier was returned as part of the response.|\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.                   |\r\n|500 |Fail, the server encountered an unexpected error.                                            |"
							},
							"response": [
								{
									"name": "Create Configuration",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a674d66-61a7-4908-b2a3-5931ccd47069",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Configuration**_.\r\n\r\n```\r\nGET /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [\r\n    \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n  ],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [\r\n    \"7adc7914-2bfe-41f0-9808-422bab5c412b\"\r\n  ],\r\n  \"connector\": \"connector_xray\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"<rhino_user>\",\r\n    \"userName\": \"<rhino_password>\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reportOut\": \"<path_to_reports_folder>\",\r\n    \"logsOut\": \"<path_to_logs_folder>\",\r\n    \"reporters\": null,\r\n    \"connectionString\": null,\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  },\r\n  \"connectorConfiguration\": {\r\n    \"collection\": \"http://localhost:8080\",\r\n    \"password\": \"admin\",\r\n    \"user\": \"admin\",\r\n    \"project\": \"XDP\",\r\n    \"bugManager\": true,\r\n    \"dryRun\": false\r\n  }\r\n  \"capabilities\": {\r\n    \"bucketSize\": 15\r\n  }\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                                                  |Type  |Description                                                                                            |\r\n|------------------------------------------------------|------|-------------------------------------------------------------------------------------------------------|\r\n|name                                                  |string|The name of this _**Rhino Configuration**_.                                                            |\r\n|testsRepository                                       |array |A collection of folders and files in which there are _**Rhino Test Cases**_.                           |\r\n|driverParameters                                      |array |A collection of parameters which represents the target platforms on which the tests will run.          |\r\n|dataSource                                            |array |A collection of data objects which will be cascaded as primary table for all _**Rhino Test Cases**_.   |\r\n|models                                                |array |A collection of _**Rhino Page Models**_ sources.                                                       |\r\n|gravityEndpoint                                       |string|Gravity Server endpoint. Use to send requests using remote gravity service instead of embedded service.|\r\n|capabilities                                          |object|A set of key/value for passing explicit settings and parameters to your automation provider connector or other plugins implementations.|\r\n|[authentication](#authentication)                     |string|User name and password for authentication on Rhino Service.                                            |\r\n|[engineConfiguration](#engine-configuration)          |object|Configure the automation engine behavior.                                                              |\r\n|[screenshotsConfiguration](#screenshots-configuration)|object|Configure the screenshot behavior.                                                                     |\r\n|[reportConfiguration](#report-configuration)          |object|Configure the reporting behavior.                                                                      |\r\n|[connectorConfiguration](#connector-configuration)    |object|Configure the behavior against 3rd party automation provider such as Jira, Test Rail or Azure DevOps.  |\r\n\r\n#### Authentication\r\n|Name    |Type  |Description                 |\r\n|--------|------|----------------------------|\r\n|userName|string|A valid Rhino API user name.|\r\n|password|string|A valid Rhino API password. |\r\n\r\n#### Engine Configuration\r\n|Name                    |Type   |Description                                                                                                            |\r\n|------------------------|-------|-----------------------------------------------------------------------------------------------------------------------|\r\n|maxParallel             |number |The maximum number of tests that will be executed in parallel.                                                         |\r\n|failOnException         |boolean|When set to true, test cases will fail if exceptions were thrown during test regardless of assertions passed or failed.|\r\n|optimalThreshold        |decimal|Any test which violates this threshold (in minutes), will be marked as non-optimal.                                    |\r\n|qualityThreshold        |decimal|Any test which violates this threshold (in percents), will be marked as failed.                                        |\r\n|toleranceThreshold      |decimal|Any test which falls within this threshold (in percents), will be marked as warning when fail.                         |\r\n|priority                |number |All tests with priority lower than this number will be marked as warning when fail.                                    |\r\n|severity                |number |All tests with severity lower than this number will be marked as warning when fail.                                    |\r\n|errorOnExitCode         |number |The error code (console application error code) which will cause the CI/CD process to fail.                            |\r\n|elementSearchingTimeout |number |The timeout in millisecond when searching for elements.                                                                |\r\n|pageLoadTimeout         |number |The timeout in millisecond when loading a page or application.                                                         |\r\n|retrunExceptions        |boolean|When set to false, exceptions will not be returned by Gravity engine. This might affect the tests results.             |\r\n|returnPerformancePoints |boolean|When set to false, performance data will not be returned by Gravity engine. This might affect the tests results.       |\r\n|returnEnvironment       |boolean|When set to true, will return the current Gravity Environment parameters.                                              |\r\n|terminateOnAssertFailure|boolean|When set to true, automation will stop if assertion any assertion action failed.                                       |\r\n|integration             |string |3rd party platform integration. Available integrations are, BrowserStack and LambdaTest.                               |\r\n\r\n#### Screenshots Configuration\r\n|Name             |Type   |Description                                                                                               |\r\n|-----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|keepOriginal     |boolean|When set to true, will keep the original file created by Gravity engine, when creating a new Rhino report.|\r\n|onExceptionOnly  |boolean|When set to true, returns a screenshot only if exception was thrown during execution.                     |\r\n|returnScreenshots|boolean|When set to false, screenshots will be returned from Gravity engine.                                      |\r\n|screenshotsOut   |decimal|The directory in which to save automatic screenshots.                                                     |\r\n\r\n#### Report Configuration\r\n|Name            |Type   |Description                                                                                               |\r\n|----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|reportOut       |string |The directory in which to save reports.                                                                   |\r\n|logsOut         |string |The directory in which to save logs.                                                                      |\r\n|reporters       |array  |Reporters implementations to use with this configuration.                                                 |\r\n|archive         |boolean|When set to true, will archive the report out folder as zip file and delete the original folder.          |\r\n|localReport     |boolean|When set to false, will not generate Rhino report.                                                        |\r\n|addGravityData  |boolean|When set to true, will save Gravity API requests and response along with the reports and logs information.|\r\n\r\n#### Connector Configuration\r\n|Name        |Type   |Description                                                                                                                                       |\r\n|------------|-------|--------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|connector   |string |Connector implementation type to use with this _**Rhino Configuration**_. If not specified, 'connecor_text' will be used as default.              |\r\n|collection  |string |The server base address under which the application is hosted (i.e. Jira or DevOps server endpoint).                                              |\r\n|password    |string |A valid password for your application (i.e. Jira or DevOps password).                                                                             |\r\n|userName    |string |A valid user for your application (i.e. Jira or DevOps password). The use must have create permissions for **Tests**, **Bugs** and **Executions**.|\r\n|project     |string |The project name or ID (depends on the connector implementation) under which to find and execute tests.                                           |\r\n|bugManager  |boolean|Set to **true** in order to activate the bug manager feature for the selected connector.                                                          |\r\n|dryRun      |boolean|When set to **true** all integration implementation which creates or manipulates A.L.M entities, will be ignored.                                 |\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Configuration**_ was returned as part of the response.               |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Get Configuration",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0141d491-890a-4f8d-bd72-10b5003aeb9b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_.\r\n\r\n```\r\nGET /api/v3/configurations\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"configurations\": [\r\n      {\r\n        \"id\": \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n        \"models\": [\r\n          \"7adc7914-2bfe-41f0-9808-422bab5c412b\"\r\n        ],\r\n        \"tests\": [\r\n          \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n        ]\r\n      },\r\n      ...\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes one configuration group, with one elements collection and one tests collection.\r\n\r\n|Name    |Type  |Description                                                              |\r\n|--------|------|-------------------------------------------------------------------------|\r\n|id      |string|The ID of the _**Rhino Configuration**_.                                 |\r\n|models  |array |All available _**Rhino Page Models**_ for this _**Rhino Configuration**_.|\r\n|tests   |array |All available _**Tests Cases**_ for this _**Rhino Configuration**_.      |\r\n\r\n### Response Codes\r\n|Code|Description                                                                |\r\n|----|---------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Collections**_ were returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                          |"
							},
							"response": [
								{
									"name": "Get Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Edit Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fde8c36-d148-4211-897e-68940a21ce73",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Updates an existing _**Rhino Configuration**_.\r\n\r\n```\r\nPUT /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Configuration](#get-configuration) [Response Content](#response-content).\r\n\r\n### Request Example\r\n```js\r\n{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"<rhino_user>\",\r\n    \"userName\": \"<rhino_password>\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reportOut\": \"<path_to_reports_folder>\",\r\n    \"logsOut\": \"<path_to_logs_folder>\",\r\n    \"reporters\": null,\r\n    \"connectionString\": null,\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Configuration**_ was returned as part of the response.               |\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.           |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Edit Configuration",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58ce7a6f-fa88-494c-84db-0456bb3086da",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Configuration**_.\r\n\r\n```\r\nDELETE /api/v3/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n> Please Note: Deleting a configuration cannot be undone. It does not, however, affect test cases/models.\r\n\r\n### Response Codes\r\n|Code|Description                                                                          |\r\n|----|-------------------------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was deleted.                                        |\r\n|404 |Not Found, the _**Configuration**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                    |"
							},
							"response": [
								{
									"name": "Delete Configuration",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3331188f-d369-445d-802c-5b6b787d1c12",
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Deletes all existing _**Rhino Configuration**_ for the authenticated user.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a configuration cannot be undone. It does not, however, affect test cases/models.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Configurations**_ were deleted.  |\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Configurations",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Configurations API**_ to create configurations for executing automation testing.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68c8fc09-fd5a-44ce-b310-d458032641a7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a00ad9bf-517e-49a1-995a-1a2841785526",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21ffe929-d814-4f08-ab12-97fe49a8d79b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c406a740-dfa5-4d83-a340-a351d6ea1f3c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Update Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2f23b9c-ff0f-4cd5-98f3-6c6b47564b94",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configuration name updated\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.name.includes(\"After Update\");\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.driverParameters.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"EdgeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"IEDriverServer\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Update Configuration - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ceb0bc6-c223-4f2e-9b3f-3bc2e3cc2af8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/not_an_id",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"not_an_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Update Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55c6e09d-9705-4831-ab3a-4a7dbbbe65de",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8883a02e-e751-4959-b51b-b2c6583daa65",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Configurations - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed6026d4-26b4-4c06-b02b-b1e604d63ce7",
										"exec": [
											"pm.test(\"Configurtions count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Configuration - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58e0bf7-f186-44fd-b9c1-9a8a921185a9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38950350-49a9-4d23-985f-143fef65fca1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "683593ef-cd7f-41ad-bd1f-1be6e542e531",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebcd5366-6ec4-47d3-9c0e-82804fedbf44",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Get Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ac0c6c1-e28c-4a9b-a40c-31df414fe4bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Delete Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7425a5c5-b828-4345-a7af-1b794fa690a7",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Delete Configuration - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f44bfdf2-1478-4cc3-bd66-648b878d38fc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "480f6363-88cb-47b9-932a-7952cdcb0a38",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dccc8f3-4898-435d-89d4-f05db0e2df68",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3db353-3e23-4fa0-aede-90ec4025b30a",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Get Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d90a7ae6-d54b-40e2-ab2b-144544049e5e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver parameters count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Configurations**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b84d582-d1e0-4bac-a72e-b4aec7e86f90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cdb55277-c457-463c-b0d3-742e76aa2476",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Page Models",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3d3c9e6-7b85-40fb-9a57-14c917e08640",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"Students Input Models\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Creates a new _**Rhino Model**_.\r\n\r\n```\r\nPOST /api/v3/models\r\n```\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Model](#get-model) response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                      |\r\n|----|-------------------------------------------------------------------------------------------------|\r\n|201 |Success, the _**Models Collection**_ created and identifier was returned as part of the response.|\r\n|400 |Bad Request, the request is missing a mandatory field(s) or bad formatted.                       |\r\n|500 |Fail, the server encountered an unexpected error.                                                |"
							},
							"response": [
								{
									"name": "Create Models Collection",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Students Input Models\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b21de2a-afd7-4fcf-b5a6-608edf660317",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Model**_ collection.\r\n\r\n```\r\nGET /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                |\r\n|-------------|------|-------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Model**_ collection.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  },\r\n  \"name\": \"Students Table Models\",\r\n  ...\r\n]\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                   |Type  |Description                                                         |\r\n|-----------------------|------|--------------------------------------------------------------------|\r\n|name                   |string|The name of this _**Rhino Model**_.                                 |\r\n|[entries](#model-entry)|array |A collection of _**Rhino Model Entry**_.                            |\r\n|context                |object|A free style object which can be used to further describe the model.|\r\n\r\n#### Model Entry\r\n|Name   |Type  |Description                                                                                |\r\n|-------|------|-------------------------------------------------------------------------------------------|\r\n|name   |string|The name of the element (required and must be compliant with Rhino's language rules).      |\r\n|value  |string|The value of selected locator (required).                                                  |\r\n|type   |string|The type of selected locator. If no type specified, default is XPath.                      |\r\n|comment|string|Any comment relevant for further describing this model entry (optional).                   |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Models**_ were returned as part of the response.       |\r\n|404 |Not Found, the _**Models**_ were not found under the models collection.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Models Collection",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Associated Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ae04eb7-0c2d-4d67-b51e-1557dcbbce17",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_ which are associated with this _**Rhino Model**_ collection.\r\n\r\n```\r\nGET /api/v3/models/:collection_id/configurations\r\n```\r\n\r\n|Name         |Type  |Description                                 |\r\n|-------------|------|--------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Models**_ collection.|\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"configurations\": [\r\n      \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n      \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Configurations**_ were returned as part of the response.|\r\n|404 |Not Found, the _**Rhino Models**_ collection was not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Associated Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aec5f12f-fa3a-46ff-b8ba-d4a18bc6fd77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Returns a list of available _**Rhino Models**_.\r\n\r\n```\r\nGET /api/v3/models\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"collection\": [\r\n      {\r\n        \"id\": \"1ed4ea1c-9959-40d7-b40e-717b8fc1cfb4\",\r\n        \"configurations\": [\r\n          \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n          \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n        ],\r\n        \"models\": 1,\r\n        \"entries\": 3\r\n      },\r\n      {\r\n        \"id\": \"ba6b3da7-1979-48ea-9b00-e30682f5f111\",\r\n        \"configurations\": [],\r\n        \"models\": 1,\r\n        \"entries\": 3\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 models, with 1 entries each and 2 configurations for one of them.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|id            |string|The ID of the _**Rhino Models**_.                |\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n|models        |number|Total models under the models collection.        |\r\n|entries       |number|Total entries (elements) under the model.        |"
							},
							"response": [
								{
									"name": "Get Models",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Configuration to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7b7c726-620f-451d-94c6-4bb4b033a78d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Adds a new _**Configuration**_ to the provided _**Elements Collection**_.\r\n\r\n> PATCH /api/elements/:id/configurations/:configuration_id\r\n\r\n|Name            |Type  |Description                               |\r\n|----------------|------|------------------------------------------|\r\n|id              |string|The ID of the _**Elements Collection**_.|\r\n|configuration_id|string|The ID of the _**Configuration**_.        |\r\n\r\n### Response Codes\r\n|Code|Description                                                                    |\r\n|----|-------------------------------------------------------------------------------|\r\n|204 |Success, the _**Elements Collection**_ was updated.                            |\r\n|400 |Bad Request, the _**id**_ or _**configuration_id**_ were not provided.         |\r\n|404 |Not Found, the _**Elements Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                              |"
							},
							"response": [
								{
									"name": "Add Configuration to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Models to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e8e4445-ba51-4e03-9206-83afce0126a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"name\": \"Students Input Models - 2\",\n\t\t\"entries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"search students text-box\",\n\t\t\t\t\"value\": \"#SearchString\",\n\t\t\t\t\"type\": \"css selector\",\n                \"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students text-box on the top center panel under students page.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"search students button\",\n\t\t\t\t\"value\": \"//input[@id='SearchButton']\",\n                \"type\": \"xpath\",\n\t\t\t\t\"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students button on the top center panel under students page.\"\n\t\t\t}\t\n\t\t],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n\t\t}\n\t}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "## Add Models to Collection\r\nAdd additional _**Rhino Models**_ into an existing collection. If the model name is already exists on another model,\r\nit will be ignored.\r\n\r\n```\r\nPATCH /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                 |\r\n|-------------|------|--------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Models**_ collection.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Model](#get-model) response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"type\": \"xpath\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                        |\r\n|----|-------------------------------------------------------------------|\r\n|200 |Success, the _**Collection**_ was returned as part of the response.|\r\n|404 |Not Found, the _**Collection**_ was not found.                     |\r\n|500 |Fail, the server encountered an unexpected error.                  |"
							},
							"response": [
								{
									"name": "Add Models to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"name\": \"Students Input Models - 2\",\n\t\t\"entries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"search students text-box\",\n\t\t\t\t\"value\": \"#SearchString\",\n\t\t\t\t\"type\": \"css selector\",\n                \"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students text-box on the top center panel under students page.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"search students button\",\n\t\t\t\t\"value\": \"//input[@id='SearchButton']\",\n                \"type\": \"xpath\",\n\t\t\t\t\"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students button on the top center panel under students page.\"\n\t\t\t}\t\n\t\t],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n\t\t}\n\t}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb3777e8-40e5-44af-b8d5-390f393fff7e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Model**_ collection.\r\n\r\n```\r\nDELETE /api/v3/models/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                |\r\n|-------------|------|-------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Model**_ collection.|\r\n\r\n> Please Note: Deleting a collection cannot be undone and it can affect test cases and configurations which were using the models.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Model**_ collection was deleted. |\r\n|404 |Not Found, the _**Model**_ was not found.        |\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Models Collection",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Models Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0660c12e-5669-426e-b239-c0785cbe3093",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								},
								"description": "Deletes all existing _**Rhino Model**_ collections.\r\n\r\n```\r\nDELETE /api/v3/models\r\n```\r\n\r\n> Please Note: Deleting a collection cannot be undone and it can affect test cases and configurations which were using the models.\r\n\r\n### Response Codes\r\n|Code|Description                                       |\r\n|----|--------------------------------------------------|\r\n|204 |Success, the _**Model**_ collections were deleted.|\r\n|500 |Fail, the server encountered an unexpected error. |"
							},
							"response": [
								{
									"name": "Delete Models Collections",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/models",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"models"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Elements API**_ to create page models and submit elements collections.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0dec781d-66e7-407f-95a9-73161f9caa06",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4080b29-a95d-447e-bad1-5af4b735ba60",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88aaa7be-0118-42cb-ac8c-60c803225e2c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0f0d8b-5fbc-4752-9445-7a1166b3e0e1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbc1a6b6-7410-4d88-bc16-0567731c557b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Create Models Collection - Same Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2899291-6fc1-4496-8ca9-28c650dba66c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Create Models Collection - No Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b25e8956-e029-4428-b78e-ee478e9c7374",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ ]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Create Models Collection - No Entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b52f3e00-9d58-411e-bb1e-56b905c2b36f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53282bcc-0218-49d0-b5af-467121e1d819",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5acafdcd-d931-4739-8be0-034da4c6496f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Get Models Collection - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9695060d-7ba8-492d-903a-a2a9bd1850d6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Associated Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f11031e-38ef-4a35-a39b-0d91dfdb07b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Associated Configurations - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef0056ab-563a-4c92-affd-a6066064cd42",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f19b34-f9a6-4764-b80b-063a415132cd",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 3\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Associated Configurations - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebb63a1b-d53e-45b0-888f-b333e2c8c308",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Add Models - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a31e4f3-23d9-4e97-856b-9fd504bd69a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16a9c493-8ddc-4d83-b3c9-278565d218ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Add Models - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ac76f84-0288-40da-ac8d-d87125304b26",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd1c212c-39e7-4100-af44-6927441058aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Add Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "447359d0-3a68-4af4-a6d4-fbb621d7a94b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Add Configuration - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bc1f82e-4a29-4a05-89f7-0f0cb6ee6565",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Add Configuration - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4fc6239-4e34-43ae-9fd2-d679f0730d42",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/not_a_configuration",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"not_a_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Delete Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d272f1d8-70b7-4672-aefe-e71084cc96e6",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Delete Collection - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e1df643-784d-4e73-b6c5-51944cd5ae27",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #23: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b5adfa2-272e-4b9c-9ba2-e5d14076879e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 3;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #24: Delete Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a72251af-b821-458a-851d-aecae4471a62",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #25: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddd4bfa4-aa1e-410e-af47-402e0dce6ceb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.collection.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d077e8c5-688b-4a62-a585-04fa8bb21dc1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "604c24ba-5507-476c-9a96-016098fd59f8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Tests Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00a6638f-e4a7-4ba3-af20-224e02d8c083",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student}\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {search students text-box}\r\n4. click on {search students button}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {gravitymvctestapplication.azurewebsites.net}\r\n[5] assert {count} on {//td[@id]} is greater than {0}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Models**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "327f42f6-e73c-4235-a523-c5b6f78490b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "578a45e5-e7dc-42e5-bd4a-41fea92e741d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test Cases",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create Tests Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa6ca3c5-ce91-4846-8995-277b8422d87a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Creates a new _**Rhino Test Case Collection**_.\r\n\r\n```\r\nPOST /api/tests/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                                                             |\r\n|----------------|------|----------------------------------------------------------------------------------------|\r\n|configuration_id|string|The ID of the configuration group under which to create the tests collection (optional).|\r\n\r\n### Request Fields\r\nNew _**Rhino Test Case Collection**_ using the same response format as [Get Test Case Collection](#get-test-case-collection).  \r\n\r\n> Please note, it is possible to create an empty collection without provided any information in the request body.\r\n\r\n#### Request Sample\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\n### Response Fields\r\n|Name |Type  |Description              |\r\n|-----|------|-------------------------|\r\n|id   |string|The ID of the collection.|\r\n\r\n#### Response Sample\r\n```js\r\n{\r\n  \"data\": {\r\n    \"id\": \"73e21d1b-770b-4347-805a-eae4f622a146\"\r\n  }\r\n}\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                    |\r\n|----|---------------------------------------------------------------|\r\n|201 |Success, the _**Rhino Test Case Collection**_ was created.     |\r\n|404 |Not Found, the provide _**Rhino Configuration**_ was not found.|\r\n|500 |Fail, the server encountered an unexpected error.              |"
							},
							"response": [
								{
									"name": "Create Collection - Multiple Tests, Data Driven",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] 002\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Collection - Single Test, No Data, with Configuration",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {https://www.google.com/} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (//input[@name='q'])\n4. click on the first {//ul[@role='listbox']/li}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {google.com}\n[3] assert on {//input[@name='q']} get value from {value} attribute must match {gravity}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Collection - Single Test, Data Driven",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] 001\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Associated Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb25129-7754-4793-928f-8307418b44e6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								},
								"description": "Returns a list of available _**Rhino Configurations**_ which are associated with this _**Rhino Test Case**_ collection.\r\n\r\n```\r\nGET /api/v3/tests/:collection_id/configurations\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"configurations\": [\r\n      \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n      \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Configurations**_ were returned as part of the response.|\r\n|404 |Not Found, the _**Rhino Test Case**_ collection was not found.                |\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Associated Configurations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Tests Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a87d734a-5da1-4be4-bb43-d61435c85178",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Returns an existing _**Rhino Test Case**_ collection (test suite content).\r\n\r\n```\r\nGET /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n  {\r\n    \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n    \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n    \"search-text-box\": \"//input[@id='SearchString']\",\r\n    \"search-button\": \"#SearchButton\",\r\n    \"students-table\": \"//td[@id]\"\r\n  }\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n> The response is an array of Rhino Test Spec of media type `text/plain`.\r\n> Scenarios are separated by an empty line, followed by `>>>` followed by another empty line.\r\n> The fields are annotated following Rhino's language text format.\r\n\r\n#### Mandatory Fields\r\n|Name                 |Type|Description                                                  |\r\n|---------------------|----|-------------------------------------------------------------|\r\n|test-id              |text|The unique ID of the test case.                              |\r\n|test-scenario        |text|The title of the test case.                                  |\r\n|test-actions         |text|Line separated list of the test actions to execute.          |\r\n\r\nThe following system fields are sometimes included in the response:\r\n\r\n#### Optional Fields\r\n|Name                 |Type|Description                                                            |\r\n|---------------------|----|-----------------------------------------------------------------------|\r\n|test-expected-results|text|Line separated list of the test expected results to execute.           |\r\n|test-data-provider   |text|JSON or Markdown format table (string, string) for data driven testing.|\r\n|test-priority        |text|The test priority level - must include number i.e. \"1 - High\".         |\r\n|test-severity        |text|The test severity level - must include number i.e. \"4 - Low\".          |\r\n|test-tolerance       |text|The test tolerance level - must include decimal number i.e. \"80.5%\".   |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Tests Cases**_ returned as part of the response. |\r\n|404 |Not Found, the provided _**Rhino Test Case Collection**_ was not found.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Tests Collection",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Tests Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ff6c43-c4d9-469c-8f73-e3faeaa69d71",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Returns a list of available _**Rhino Test Cases**_ collections.\r\n\r\n```\r\nGET /api/v3/tests\r\n```\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"data\": {\r\n    \"collection\": [\r\n      {\r\n        \"id\": \"1ed4ea1c-9959-40d7-b40e-717b8fc1cfb4\",\r\n        \"configurations\": [\r\n          \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n          \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n        ],\r\n        \"tests\": 3\r\n      },\r\n      {\r\n        \"id\": \"ba6b3da7-1979-48ea-9b00-e30682f5f111\",\r\n        \"configurations\": [],\r\n        \"tests\": 3\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe example response includes 2 collections, with 3 tests in each and 2 configurations for one of them.\r\n\r\n|Name          |Type  |Description                                                   |\r\n|--------------|------|--------------------------------------------------------------|\r\n|id            |string|The ID of the _**Rhino Tests Collection**_.                   |\r\n|configurations|array |All _**Rhino Configurations**_ which are using the collection.|\r\n|tests         |number|Total models under the models collection.                     |\r\n\r\n### Response Codes\r\n|Code|Description                                                                            |\r\n|----|---------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Tests Collection**_ information returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                                      |"
							},
							"response": [
								{
									"name": "Get Tests Collections",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Tests to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6a1a72f-ceed-4fc2-9b68-f238169fc6c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] rhino-documentation-004\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Add additional _**Rhino Test Cases**_ into an existing collection.  \r\n\r\n> Please note, there is no duplication check here, and you can add tests with the same ID.\r\n> However, Rhino Engine, will not execute them, since it will distinct all IDs before running automation.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Test Case Collection](#get-test-case-collection) response content.\r\n\r\n### Request Example\r\n```\r\n[test-id] rhino-documentation-003\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n  {\r\n    \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n    \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n    \"search-text-box\": \"//input[@id='SearchString']\",\r\n    \"search-button\": \"#SearchButton\",\r\n    \"students-table\": \"//td[@id]\"\r\n  }\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-004\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                        |\r\n|----|-------------------------------------------------------------------|\r\n|200 |Success, the _**Collection**_ was returned as part of the response.|\r\n|400 |Bad Request, no test cases were provided in the request body.      |\r\n|404 |Not Found, the _**Collection**_ was not found.                     |\r\n|500 |Fail, the server encountered an unexpected error.                  |"
							},
							"response": [
								{
									"name": "Add Tests to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] rhino-documentation-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] rhino-documentation-004\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add Configuration to Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d29115-c8c5-4510-994d-eeaaad697a16",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Add additional _**Rhino Configuration**_ into an existing collection.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                    |\r\n|----------------|------|-----------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Test Case**_ collection.|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.       |\r\n\r\n### Response Codes\r\n|Code|Description                                                           |\r\n|----|----------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was applied to the _**Collection**_. |\r\n|404 |Not Found, the _**Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                     |"
							},
							"response": [
								{
									"name": "Add Configuration to Collection",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23138ab7-2a80-4e9c-8304-59409405948c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								},
								"description": "Deletes an existing _**Rhino Test Case**_ collection.\r\n\r\n```\r\nDELETE /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n  \r\n> Please Note: Deleting a collection cannot be undone and it can affect the configurations which were using the test cases.  \r\n\r\n### Response Codes\r\n|Code|Description                                             |\r\n|----|--------------------------------------------------------|\r\n|204 |Success, the _**Test Case**_ collection was deleted.    |\r\n|404 |Not Found, the _**Test Case**_ collection was not found.|\r\n|500 |Fail, the server encountered an unexpected error.       |"
							},
							"response": [
								{
									"name": "Delete Collection",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31e653f6-2d17-4397-9c96-058fc12f3f3e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								},
								"description": "Deletes all existing _**Rhino Test Case**_ collections.\r\n\r\n```\r\nDELETE /api/v3/tests\r\n```\r\n  \r\n> Please Note: Deleting a collection cannot be undone and it can affect the configurations which were using the test cases.\r\n  \r\n### Response Codes\r\n|Code|Description                                           |\r\n|----|------------------------------------------------------|\r\n|204 |Success, the _**Test Case**_ collections were deleted.|\r\n|500 |Fail, the server encountered an unexpected error.     |"
							},
							"response": [
								{
									"name": "Delete All Collections",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/tests",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"tests"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Collection API**_ to integrate automated tests, submit test results and automate various aspects of your application.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "632f87ea-6ae0-4a91-9345-157030f22fba",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"dataProvider\": null,\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Tests Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22345349-8862-42bd-9783-44b963b4ac04",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ae03986-e27c-4ba0-8aa4-3bb398d80f5c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Create Tests Collection - No Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0817c36-8605-495d-8c07-4b9ca20ff365",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "710f0017-9427-4026-9772-d2ce4c41f109",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 2\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Get Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "374be824-5de9-49c6-ab14-244897639c9f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Tests Collection - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59600b22-f966-47b4-8c8c-a582d92e8154",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Associated Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c7d49b8-f6f7-49dd-9db1-0099759f8b49",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Get Associated Configurations - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "653394f2-9a31-470a-924a-6180dcffeb36",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Create Tests Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fcfee42-2b12-45aa-a6dd-90a439eae0d7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Associated Configurations - Configuration Not Found Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f798730-dffd-4098-b996-e7d1098f2e8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.data.configurations.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Add Tests - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c64e88-cb4c-471e-ac4a-0451b6b0d4e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 3\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Add Tests - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffce3c00-d489-430a-9ec4-cfa1909a0069",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Add Configuration - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208384fc-02d8-40b8-81a4-92d3cdb745da",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/not_a_configuration",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}",
										"configurations",
										"not_a_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b466bac-a178-4277-9834-92879794de19",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 5\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Delete Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2425d47-a7f1-41c1-aeda-dd9d643e087e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Delete Collection - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b152d50-861d-4d08-b771-2c515e62f76b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55571de9-1ee5-4d23-b8f9-afc85abdec06",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 2\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Delete Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4d3e721-3625-481c-861f-bd50781eb1b1",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Get Tests Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb07480c-b084-496e-a732-38f8cf65a9d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Tests count is 0\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('0');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9c46a6-3f93-47d3-9cb4-71b4f7fac758",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "570074bb-43e6-4049-b108-21c26cdd5c84",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Test Cases**_ and to create or modify automation scenarios.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e52dc6aa-a4cd-41db-93fe-08ac8dbc8f5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "705a061b-b528-4557-bed5-00782fdc0c35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test Runs",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb34d9fb-d713-4d82-909d-8e9d38d6855c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d799f4d1-ea8a-4b78-92cc-ad32e47cce86",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": true,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c881429-cdff-41f2-8320-0e0e2cccc5ac",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Preconditions for _**Rhino API**_ microservices.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "440e7d0e-b841-4f68-94ad-addb912163b5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Runs _**Rhino Spec**_ directly from the request body.\r\n\r\n```\r\nPOST /api/v3/rhino/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as _**Get Test Case Collection**_ response content.\r\n\r\n### Request Example\r\nPlease see below for a typical request:\r\n\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided.            |\r\n|404 |Not Found, the _**Rhino Configuration**_ was not found.             |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Collection (one configuration)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Configurations - Unattached",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe6350cd-f27d-43ad-bbdc-8ade1e39cfa1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"testsRepository\": [\r\n      \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n      {\r\n        \"driver\": \"ChromeDriver\",\r\n        \"driverBinaries\": \"{{rhino_drivers}}\"\r\n      }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n      \"password\": \"{{rhino_password}}\",\r\n      \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n      \"maxParallel\": 1,\r\n      \"failOnException\": false,\r\n      \"optimalThreshold\": 3,\r\n      \"qualityThreshold\": 0,\r\n      \"toleranceThreshold\": 0,\r\n      \"priority\": 0,\r\n      \"severity\": 0,\r\n      \"errorOnExitCode\": 0,\r\n      \"elementSearchingTimeout\": 15000,\r\n      \"pageLoadTimeout\": 60000,\r\n      \"retrunExceptions\": true,\r\n      \"returnPerformancePoints\": true,\r\n      \"returnEnvironment\": true,\r\n      \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n      \"keepOriginal\": false,\r\n      \"returnScreenshots\": true,\r\n      \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n      \"reporters\": [\r\n        \"reporter_basic\",\r\n        \"reporter_warehouse\"\r\n      ],\r\n      \"archive\": false,\r\n      \"localReport\": true,\r\n      \"addGravityData\": true\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations"
									]
								},
								"description": "Executes a collection of _**Rhino Configuration**_ without saving the configuration under Rhino Server State.\r\n\r\n```\r\nPOST /api/v3/rhino/configurations/execute\r\n```\r\n\r\n### Request Fields\r\nA collection of _**Rhino Configuration**. Each item in the request body follows the same format as _**Get Configuration**_ response content.\r\n\r\n### Request Example\r\n```js\r\n[\r\n    {\r\n        \"name\": \"Rhino Automation - Chrome\",\r\n        \"testsRepository\": [ ],\r\n        \"driverParameters\": [\r\n            {\r\n                \"driver\": \"ChromeDriver\",\r\n                \"driverBinaries\": \"http://localhost:4444/wd/hub\"\r\n            }\r\n        ],\r\n        \"dataSource\": [],\r\n        \"models\": [ ],\r\n        \"connector\": \"connector_text\",\r\n        \"gravityEndpoint\": \"\",\r\n        \"authentication\": {\r\n            \"password\": \"<rhino_user>\",\r\n            \"userName\": \"<rhino_password>\"\r\n        },\r\n        \"engineConfiguration\": {\r\n            \"maxParallel\": 1,\r\n            \"failOnException\": false,\r\n            \"optimalThreshold\": 3.0,\r\n            \"qualityThreshold\": 0.0,\r\n            \"toleranceThreshold\": 0.0,\r\n            \"priority\": 0,\r\n            \"severity\": 0,\r\n            \"errorOnExitCode\": 0,\r\n            \"elementSearchingTimeout\": 15000,\r\n            \"pageLoadTimeout\": 60000,\r\n            \"retrunExceptions\": true,\r\n            \"returnPerformancePoints\": true,\r\n            \"returnEnvironment\": true,\r\n            \"terminateOnAssertFailure\": false\r\n        },\r\n        \"screenshotsConfiguration\": {\r\n            \"keepOriginal\": false,\r\n            \"returnScreenshots\": false,\r\n            \"screenshotsOut\": \"<path_to_screenshots_folder>\",\r\n            \"onExceptionOnly\": false\r\n        },\r\n        \"reportConfiguration\": {\r\n            \"reportOut\": \"<path_to_reports_folder>\",\r\n            \"logsOut\": \"<path_to_logs_folder>\",\r\n            \"reporters\": null,\r\n            \"connectionString\": null,\r\n            \"dataProvider\": null,\r\n            \"archive\": false,\r\n            \"localReport\": true,\r\n            \"addGravityData\": true\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Rhino Automation - Firefox\",\r\n        \"testsRepository\": [ ]\r\n    ...\r\n]\r\n```\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Configurations - Unattached",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"testsRepository\": [\r\n      \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n      {\r\n        \"driver\": \"ChromeDriver\",\r\n        \"driverBinaries\": \"{{rhino_drivers}}\"\r\n      }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n      \"password\": \"{{rhino_password}}\",\r\n      \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n      \"maxParallel\": 1,\r\n      \"failOnException\": false,\r\n      \"optimalThreshold\": 3,\r\n      \"qualityThreshold\": 0,\r\n      \"toleranceThreshold\": 0,\r\n      \"priority\": 0,\r\n      \"severity\": 0,\r\n      \"errorOnExitCode\": 0,\r\n      \"elementSearchingTimeout\": 15000,\r\n      \"pageLoadTimeout\": 60000,\r\n      \"retrunExceptions\": true,\r\n      \"returnPerformancePoints\": true,\r\n      \"returnEnvironment\": true,\r\n      \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n      \"keepOriginal\": false,\r\n      \"returnScreenshots\": true,\r\n      \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n      \"reporters\": [\r\n        \"reporter_basic\",\r\n        \"reporter_warehouse\"\r\n      ],\r\n      \"archive\": false,\r\n      \"localReport\": true,\r\n      \"addGravityData\": true\r\n    }\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/rhino/configurations",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Collection (all configurations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd01fa82-8863-49cd-b54e-a4915f0ad3f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}"
									]
								},
								"description": "Runs an existing _**Rhino Test Case**_ collection and returns _**Rhino Test Run**_ object. The execution will be done on all configurations attached to this collection.\r\n\r\n```\r\nGET /api/v3/rhino/collections/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                          |\r\n|-------------|------|-------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Collection**_.|\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Collection**_ was not provided.               |\r\n|404 |Not Found, the _**Rhino Collection**_ was not found.                |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Collection (all configurations)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/collections/{{collection_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"collections",
												"{{collection_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842dfad2-ca0d-450c-a685-cb9514d1aa8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "# API: Rhino\r\nUse the following API methods run automation specs and get _**Rhino Test Run**_ object.\r\n\r\n## Run by Configuration\r\nRuns an existing configuration and returns _**Rhino Test Run**_ object.\r\n\r\n```\r\nGET /api/v3/rhino/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n#### Response Content\r\n\r\n```js\r\n{\r\n  \"key\": \"unattached-2020.08.19.06.36.43.698\",\r\n  \"actual\": true,\r\n  \"reasonPhrase\": \"\",\r\n  \"title\": \"Rhino Automation - Test Run Generator (ID: 2020.08.19.06.36.43.698); (Configuration: Rhino Automation - Chrome)\",\r\n  \"start\": \"2020-08-19T18:36:43.6989032+03:00\",\r\n  \"end\": \"2020-08-19T18:37:36.4887447+03:00\",\r\n  \"runTime\": \"00:00:52.7898415\",\r\n  \"testCases\": [\r\n    {\r\n      \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0\",\r\n      \"key\": \"rhino-documentation-001\",\r\n      \"testSuite\": \"\",\r\n      \"testRunKey\": \"unattached-2020.08.19.06.36.43.698\",\r\n      \"scenario\": \"search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\",\r\n      \"reasonPhrase\": \"\",\r\n      \"actual\": true,\r\n      \"steps\": [\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-0\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\",\r\n          \"command\": \"GoToUrl\",\r\n          \"expected\": \"<span>assert {url} match {gravitymvctestapplication.azurewebsites.net}</span>\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:14.2072016\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-1\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"2. close all child windows (to make sure only the web site is open and visible)\",\r\n          \"command\": \"CloseAllChildWindows\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.0119308\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-2\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"3. send keys {Carson} into {//input[@id='SearchString']}\",\r\n          \"command\": \"SendKeys\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.1368129\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-3\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"4. click on {#SearchButton} using {css selector}\",\r\n          \"command\": \"Click\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.2752300\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-4\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"5. wait for {3000} milliseconds\",\r\n          \"command\": \"Wait\",\r\n          \"expected\": \"<span>assert {count} on {//td[@id]} is greater than {0}</span>\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:03.0361094\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-5\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"6. register parameter {first_name} take {Jhon}\",\r\n          \"command\": \"RegisterParameter\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:15.0670764\"\r\n        },\r\n        {\r\n          \"identifier\": \"unattached-2020.08.19.06.36.43.698-rhino-documentation-001-0-0-6\",\r\n          \"testCase\": \"\",\r\n          \"action\": \"7. close browser\",\r\n          \"command\": \"CloseBrowser\",\r\n          \"expected\": \"\",\r\n          \"actual\": true,\r\n          \"reasonPhrase\": \"\",\r\n          \"link\": \"\",\r\n          \"runTime\": \"00:00:00.1242385\"\r\n        }\r\n      ],\r\n      \"totalSteps\": 7,\r\n      \"link\": \"\",\r\n      \"iteration\": 0,\r\n      \"dataSource\": [\r\n        {\r\n          \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n          \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n          \"search-text-box\": \"//input[@id='SearchString']\",\r\n          \"search-button\": \"#SearchButton\",\r\n          \"students-table\": \"//td[@id]\"\r\n        }\r\n      ],\r\n      \"modelEntries\": [],\r\n      \"priority\": \"\",\r\n      \"severity\": \"\",\r\n      \"tolerance\": 0.0,\r\n      \"passedOnAttempt\": 0,\r\n      \"qualityRank\": 100.0,\r\n      \"inconclusive\": false,\r\n      \"start\": \"2020-08-19T18:36:43.9059141+03:00\",\r\n      \"end\": \"2020-08-19T18:37:36.4732305+03:00\",\r\n      \"runTime\": \"00:00:52.5673164\",\r\n      \"environment\": {\r\n        \"applicationParams\": {},\r\n        \"macroParams\": {},\r\n        \"sessionParams\": {\r\n          \"first_name\": \"Jhon\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"totalTests\": 1,\r\n  \"totalSteps\": 7,\r\n  \"totalPass\": 1,\r\n  \"totalPassSteps\": 7,\r\n  \"totalFail\": 0,\r\n  \"totalFailSteps\": 0,\r\n  \"totalIterations\": 1,\r\n  \"totalInconclusive\": 0,\r\n  \"successRate\": 100.0,\r\n  \"qualityRank\": 100.0,\r\n  \"link\": null,\r\n  \"performancePoints\": {\r\n    \"rhino-documentation-001_0\": 0.87612194\r\n  },\r\n  \"priorityPoints\": {\r\n    \"\": 0\r\n  },\r\n  \"severityPoints\": {\r\n    \"\": 0\r\n  },\r\n  \"aboveOptimalRate\": 0.0,\r\n  \"aboveOptimalCount\": 0,\r\n  \"belowOptimalRate\": 100.0,\r\n  \"belowOptimalCount\": 1,\r\n  \"averageTestTime\": \"00:00:52.5673164\",\r\n  \"totalTimeouts\": \"00:00:00\",\r\n  \"loadTimeouts\": \"00:00:00\",\r\n  \"elementTimeouts\": \"00:00:00\",\r\n  \"severity\": 0,\r\n  \"priority\": 0,\r\n  \"tolerance\": 0.0\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                    |Type     |Description                                                                                   |\r\n|------------------------|---------|----------------------------------------------------------------------------------------------|\r\n|key                     |string   |The unique identifier of this _**Rhino Test Run**_.                                           |\r\n|actual                  |boolean  |The actual result of this _**Rhino Test Run**_. ```true``` for pass, ```false``` for fail.    |\r\n|reasonPhrase            |string   |The reason of why this _**Rhino Test Run**_ failed.                                           |\r\n|title                   |string   |The title of this _**Rhino Test Run**_.                                                       |\r\n|start                   |date+time|The start time of this _**Rhino Test Run**_.                                                  |\r\n|end                     |date+time|The start time of this _**Rhino Test Run**_.                                                  |\r\n|runTime                 |time     |The run time (total) of this _**Rhino Test Run**_.                                            |\r\n|[testCases](#test-cases)|array    |A collection of _**Rhino Test Case**_ executed under this  _**Rhino Test Run**_.              |\r\n|totalSteps              |number   |The total steps number of this _**Rhino Test Case**_.                                         |\r\n|totalIterations         |number   |The total iterations number of this _**Rhino Test Run**_.                                     |\r\n|totalInconclusive       |number   |The total inconclusive tests number of this _**Rhino Test Run**_.                             |\r\n|successRate             |double   |The success rate of this _**Rhino Test Run**_.                                                |\r\n|qualityRank             |double   |The quality rank of this _**Rhino Test Run**_.                                                |\r\n|link                    |string   |The link pointing to this _**Rhino Test Run**_ if you are using any ALM connector.            |\r\n|performancePoints       |object   |The performance points of this _**Rhino Test Run**_, aggregated test iteration execution time.|\r\n|priorityPoints          |object   |The priority points of this _**Rhino Test Run**_, priority rank per Rhino Test Case.          |\r\n|severityPoints          |object   |The severity points of this _**Rhino Test Run**_, severity rank per Rhino Test Case.          |\r\n|aboveOptimalRate        |double   |The rate of tests which their running time is above the optimal running time threshold.       |\r\n|aboveOptimalCount       |number   |The number of tests which their running time is above the optimal running time threshold.     |\r\n|belowOptimalRate        |double   |The rate of tests which their running time is below the optimal running time threshold.       |\r\n|belowOptimalCount       |number   |The number of tests which their running time is below the optimal running time threshold.     |\r\n|totalTests              |number   |The total tests number of this _**Rhino Test Run**_.                                          |\r\n|totalSteps              |number   |The total steps number of this _**Rhino Test Run**_.                                          |\r\n|totalPass               |number   |The total passed tests number of this _**Rhino Test Run**_.                                   |\r\n|averageTestTime         |double   |The average individual test time of this _**Rhino Test Run**_.                                |\r\n|totalTimeouts           |time     |The total time spent on timeouts for this _**Rhino Test Run**_.                               |\r\n|loadTimeouts            |time     |The total time spent on page load timeouts for this _**Rhino Test Run**_.                     |\r\n|elementTimeouts         |time     |The total time spent on elements search timeouts for this _**Rhino Test Run**_.               |\r\n|severity                |number   |The severity level of this _**Rhino Test Run**_.                                              |\r\n|priority                |number   |The priority level of this _**Rhino Test Run**_.                                              |\r\n|tolerance               |double   |The tolerance level of this _**Rhino Test Run**_.                                             |\r\n\r\n#### Test Cases\r\n|Name                       |Type     |Description                                                                                                                    |\r\n|---------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------|\r\n|identifier                 |string   |The unique identifier of this _**Rhino Test Case*_.                                                                            |\r\n|key                        |string   |The _**Rhino Test Case*_ ID.                                                                                                   |\r\n|testSuite                  |string   |The ID of the test suite which test belongs to.                                                                                |\r\n|testRunKey                 |string   |The unique identifier of the test run which runs under.                                                                        |\r\n|scenario                   |string   |The title this _**Rhino Test Case*_.                                                                                           |\r\n|reasonPhrase               |string   |The reason of why this _**Rhino Test Case**_ failed.                                                                           |\r\n|actual                     |boolean  |The actual result of this _**Rhino Test Case**_. ```true``` for pass, ```false``` for fail.                                    |\r\n|[steps](#steps)            |array    |A collection of _**Rhino Test Step**_ executed under this  _**Rhino Test Case**_.                                              |\r\n|totalSteps                 |number   |The total steps number of this _**Rhino Test Case**_.                                                                          |\r\n|iteration                  |number   |The iteration number of this _**Rhino Test Case**_. Iterations are created when test run on data source or on multiple drivers.|\r\n|dataSource                 |object   |The local data source (iteration will be created for each data row) of this _**Rhino Test Case**_.                             |\r\n|modelEntries               |object   |A collection of _**Rhino Model**_ used by this _**Rhino Test Case**_.                                                          |\r\n|priority                   |number   |The priority level of this _**Rhino Test Case**_.                                                                              |\r\n|severity                   |number   |The severity level of this _**Rhino Test Case**_.                                                                              |\r\n|tolerance                  |double   |The tolerance level of this _**Rhino Test Case**_.                                                                             |\r\n|passedOnAttempt            |number   |On which attempt (when retry) the test has passed. The value 0 will be given if the test failed.                               |\r\n|qualityRank                |double   |The quality rank of this _**Rhino Test Case**_.                                                                                |\r\n|inconclusive               |Boolean  |If set to true, this test will be marked with warning when fails.                                                              |\r\n|start                      |date+time|The start time of this _**Rhino Test Case**_.                                                                                  |\r\n|end                        |date+time|The start time of this _**Rhino Test Case**_.                                                                                  |\r\n|runTime                    |time     |The run time (total) of this _**Rhino Test Case**_.                                                                            |\r\n|[environment](#environment)|object   |The automation environment data state (parameters current value) from Rhino Server State.                                      |\r\n\r\n#### Steps\r\n|Name        |Type     |Description                                                                                |\r\n|------------|---------|-------------------------------------------------------------------------------------------|\r\n|identifier  |string   |The unique identifier of this _**Rhino Test Step*_.                                        |\r\n|testCase    |string   |The parent test case identifier.                                                           |\r\n|action      |string   |The test action (i.e. go to URL {https://www.foo.io}).                                     |\r\n|command     |string   |The command used for this action (plugin command).                                         |\r\n|expected    |string   |The expected result of this _**Rhino Test Step*_.                                          |\r\n|actual      |boolean  |The actual result of this _**Rhino Test Case**_. ```true``` for pass, ```false``` for fail.|\r\n|reasonPhrase|string   |The reason of why this _**Rhino Test Case**_ failed.                                       |\r\n|link        |string   |The link pointing to this _**Rhino Test Step**_ if you are using any ALM connector.        |\r\n|runTime     |time     |The run time (total) of this _**Rhino Test Step**_.                                        |\r\n\r\n#### Environment\r\n|Name             |Type  |Description                                                                                                                  |\r\n|-----------------|------|-----------------------------------------------------------------------------------------------------------------------------|\r\n|applicationParams|object|The application parameters - Gravity Environment parameters, available for all runs. Will only reset when restart the server.|\r\n|applicationParams|object|The session parameters - Gravity Environment parameters, available for a single runs.  Will reset when run is completed.     |\r\n|macorParams      |object|The macro parameters - Gravity Macro parameters, available for a single runs.  Will reset when run is completed.             |\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided.            |\r\n|404 |Not Found, the _**Rhino Configuration**_ was not found.             |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
							},
							"response": [
								{
									"name": "Run by Configuration",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07e58ec9-1268-4634-902e-f5183faafcb5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								},
								"description": "Runs an existing _**Rhino Test Case**_ collection and returns _**Rhino Test Run**_ object.\r\n\r\n```\r\nGET /api/v3/rhino/collections/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                             |\r\n|----------------|------|----------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Collection**_.   |\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.|\r\n\r\n## Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                                         |\r\n|----|------------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.                |\r\n|400 |Bad Request, _**Rhino Collection**_ or  _**Rhino Configuration**_ were not provided.|\r\n|404 |Not Found, the _**Rhino Collection**_ or  _**Rhino Configuration**_ were not found. |\r\n|500 |Fail, the server encountered an unexpected error.                                   |"
							},
							"response": [
								{
									"name": "Run by Collection (one configuration)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"rhino",
												"collections",
												"{{collection_id}}",
												"configurations",
												"{{configuration_id}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Rhino API**_ to run Rhino Specs.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "968fd4d4-ffe6-4222-8755-318c7a657e8b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3af106fc-dc3c-498c-9431-14dc489d06df",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #1: Run by Configuration - No Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5f52939-bdbd-47d1-9efc-3b0fd332f189",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #2: Create Models Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b190854-4684-4bcb-9093-48ca93798642",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('models_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"name\": \"Students Input Models\",\n    \"entries\": [\n      {\n        \"name\": \"search students text-box\",\n        \"value\": \"#SearchString\",\n        \"type\": \"css selector\",\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\n      },\n      {\n        \"name\": \"search students button\",\n        \"value\": \"//input[@id='SearchButton']\",\n        \"comment\": \"Search students button on the top center panel under students page.\"\n      }\n    ],\n    \"context\": {\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #3: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a7b00e9-8a52-4fd0-a059-76bbf399819d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [\r\n    \"{{models_id}}\"\r\n  ],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #4: Run by Collection (one configuration) - Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92d496fb-c514-47d6-b97d-595a66231ccf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {search students text-box}\r\n4. click on {search students button}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url-expected}\r\n[5] assert {count} on {@students-table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #5: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c228d0b-1e5e-4bb0-9e15-e6ac662b4b76",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"connector\": \"connector_text\",\r\n  \"gravityEndpoint\": \"\",\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #6: Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9433ee0-a024-49da-a691-b9810c7f4841",
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search-text-box}\n4. click on {@search-button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[5] assert {count} on {@students-table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\n\t\t\"search-button\":\"#SearchButton\",\n\t\t\"students-table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #7: Run by Collection (one configuration) - Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aabb7c26-2acb-4cf2-bd05-9082eeaf90fe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/rhino/collections/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"collections",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods run automation specs and get Rhino Result object.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "426e1745-30b1-4d11-95af-40b3dfd41fe9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "610c22c5-f8d6-42f4-84ea-2525674bcccf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Plugins",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Create or Update Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f88737b8-f456-4702-81b8-78b8ca329132",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                         |\r\n|----------|----------------------------------------------------|\r\n|department|Department name. Will be used for searching courses.|\r\n|total     |Total courses. Will be used asserting results.      |\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Creates new or Updates existing one or more _**Rhino Plugin**_.\r\n\r\n```\r\nPOST /api/v3/plugins?prvt=(false|true)\r\n```\r\n\r\n|Name|Type   |Description                                                                                         |\r\n|----|-------|----------------------------------------------------------------------------------------------------|\r\n|prvt|boolean|Set to true in order to create the plugin as a private plugin available only to the user created it.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Plugin](#get-plugin) response content.\r\n\r\n### Request Example\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id] SearchCourse\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                                             |\r\n|----|--------------------------------------------------------------------------------------------------------|\r\n|200 |Success, some of the _**Plugin(s)**_ were not created and reasons were returned as part of the response.|\r\n|201 |Created, the _**Plugin(s)**_ were created returned as part of the response.                             |\r\n|500 |Fail, the server encountered an unexpected error.                                                       |"
							},
							"response": [
								{
									"name": "Create Plugins - Public",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
										},
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Create Plugins - Private",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
										},
										"url": {
											"raw": "{{endpoint}}/plugins?prvt=true",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											],
											"query": [
												{
													"key": "prvt",
													"value": "true"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Plugin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cd75a2d-f5de-4462-bd3f-27e568bfea69",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								},
								"description": "Returns an existing _**Rhino Plugins**_ content.\r\n\r\n```\r\nGET /api/v3/plugins/:plugin_id\r\n```\r\n\r\n|Name     |Type  |Description                                                                                                |\r\n|---------|------|-----------------------------------------------------------------------------------------------------------|\r\n|plugin_id|string|The ID of the _**Rhino Plugin**_ this is the unique name of the plugin as given under \"test-id\" annotation.|\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n> The response a Rhino Plugin Spec of media type `text/plain`.\r\n> The fields are annotated following Rhino's language text format.\r\n\r\n#### Mandatory Fields\r\n|Name         |Type  |Description                                        |\r\n|-------------|------|---------------------------------------------------|\r\n|test-id      |text  |The **unique name** of the plugin.                 |\r\n|test-scenario|text  |The title of the plugin.                           |\r\n|test-actions |text  |Line separated list of the test actions to execute.|\r\n|test-examples|object|At least one example of how to call your plugin.   |\r\n\r\nThe following system fields are sometimes included in the response:\r\n\r\n#### Optional Fields\r\n|Name                 |Type  |Description                                                                   |\r\n|---------------------|------|------------------------------------------------------------------------------|\r\n|test-expected-results|text  |Line separated list of the test expected results to execute.                  |\r\n|test-parameters      |object|A list of parameters including a short description of what the parameter does.|\r\n\r\n### Response Codes\r\n|Code|Description                                                      |\r\n|----|-----------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Plugin**_ returned as part of the response.|\r\n|404 |Not Found, the provided _**Rhino Plugin**_ was not found.        |\r\n|500 |Fail, the server encountered an unexpected error.                |"
							},
							"response": [
								{
									"name": "Get Plugin",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/plugins/SearchStudent",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins",
												"SearchStudent"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49155cac-f689-45af-89bd-219a1d3de67d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Returns a list of available _**Rhino Plugins**_ content.\r\n\r\n```\r\nGET /api/v3/plugins\r\n```\r\n\r\n### Response Content\r\nThe response body is an array of specs follows the same format as [Get Plugin](#get-plugin) response content.  \r\nPlease see below for a typical response:\r\n\r\n```\r\n[test-id] SearchStudent\r\n[test-scenario] Search Student by First Name and Assert Page Address and Last Name\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id] SearchCourse\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                                   |\r\n|----|------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Plugin**_ collection returned as part of the response.  |\r\n|404 |Not Found, no public plugins and no private plugins were found for the issuer.|\r\n|500 |Fail, the server encountered an unexpected error.                             |"
							},
							"response": [
								{
									"name": "Get Plugins",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Plugin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e86b99a-ea3f-40f0-af6d-e52fbd1209f0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								},
								"description": "Deletes an existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations/:plugin_id\r\n```\r\n\r\n|Name     |Type  |Description                                                                                                |\r\n|---------|------|-----------------------------------------------------------------------------------------------------------|\r\n|plugin_id|string|The ID of the _**Rhino Plugin**_ this is the unique name of the plugin as given under \"test-id\" annotation.|\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                                                         |\r\n|----|------------------------------------------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugin**_ was deleted.                                        |\r\n|404 |Not Found, the _**Rhino Plugin**_ was not found under the configurations collection.|\r\n|500 |Fail, the server encountered an unexpected error.                                   |"
							},
							"response": [
								{
									"name": "Delete Plugin",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/plugins/SearchStudent",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins",
												"SearchStudent"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec2b3bf0-39dc-47cd-9539-8ee5a96fa5f1",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": [
								{
									"name": "Delete Plugins",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{endpoint}}/plugins",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"plugins"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Rhino API**_ to create Rhino Plugins.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7183304-1c15-4b53-83cf-8b16bcc34d1c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e188563c-ce4e-4c42-a8ef-d78049993cd4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "287f8325-f333-4d36-809a-35639f5a2eee",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Plugins Repeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e47c9529-7d5f-4643-8c90-da3a0631e21f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Plugins - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aef65ee8-802a-407a-a893-537dc1f77836",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        PrivateCircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Get Plugin - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46efcbd1-b9a6-437c-b4bc-11285967f77d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Get Plugin - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c43624e1-0b3e-4329-a640-81b75e598469",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Get Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "363be5c7-2c41-466b-bedb-a38df52367dd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Plugin - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "836e6252-411f-4961-9f45-9ae889fd43f3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/NotAPlugin",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"NotAPlugin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Delete Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03d06204-882a-4304-b4b1-aee1824edcd2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Delete Plugin - Private Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b4caf73-19d0-4af1-9103-a646bd3fc4e6",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96602f68-6e06-410c-9b36-689c68bf241f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 7\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('7');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Delete Plugin - Positive with Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa9207f-5e4c-4455-b323-cc640c4d5dab",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Delete Plugin - Positive without Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47802fa7-1586-425e-9baf-5de3634edf6c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchCourses",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchCourses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea91faaf-d4d0-4c98-afbe-1758e8e31dc2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 5\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Delete All Plugins - No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a5f86e5-77be-443b-a95d-9d0c0d08854f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "477ef16f-1f1f-4653-a048-eb5b020326ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 3\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b50ad76-64e2-4ecc-a295-3d7fdc5b6003",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Create Plugins Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2ab7e5-9c70-4988-b6c1-9965b8933cd6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        Private2CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        Private2SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Delete All Plugins - Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3398eca5-6614-4ec9-bc8d-a6645bf85bb5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Get Plugins - Positive User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19411601-eb3e-49e0-a9a2-4a671261fc51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Delete All Plugins - Credentials User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb8556f1-1c3a-442c-951f-59c63df6880c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1867dd18-8861-49fb-b702-188af6907a16",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acf75885-2ece-418b-b208-d770f95ad2b9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #23: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88f38a9b-6b9b-474e-a607-abba1944fc6f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #24: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cac20e7e-5fe3-4802-8de3-b514e4050c1a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #25: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbda8207-949d-4367-afeb-02e7c5d61e46",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{rhino_password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{rhino_user}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "039bcaab-4edb-432c-9d64-72990619ff64",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9f369e1-91d7-4e65-9759-1a5b5b827294",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41a530b0-a656-442c-9f91-50f0f382b233",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {@first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {@first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {@last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "297af19a-ccf8-4ce2-a0f8-cd7d5b8e2313",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.data.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_user}}\",\r\n    \"userName\": \"{{rhino_password}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": true,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7537ef6e-804f-4594-993d-9746b7af76ec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. search student {{$ --first_name:Carson --last_name:Alexander}}\r\n5. wait for {3000} milliseconds\r\n6. close browser",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df09f1b9-29db-4462-8df1-d07375e479c5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. search student {{$ --first_name:Carson --last_name:Alexander}}\r\n5. wait for {3000} milliseconds\r\n6. close browser",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f90489b6-9d71-4326-89f7-20fb75829c6f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Delete all configurations"
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8946692-012d-456b-906d-70b628b9bdbe",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about _**Rhino Plugins**_ and to create or modify them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "43b0edb1-d742-4563-949a-2129e349ff83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "702be5c4-5148-45f5-906e-d25a61b49d01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Logs & Analysis",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Get Logs - Download",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/logs/20200913/download",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913",
										"download"
									]
								},
								"description": "Downloads an existing _**Automation Log**_ as _**zip**_ file.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/download\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n\r\n#### Response Content\r\n> The response is a file of media type ```application/zip```.\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": []
						},
						{
							"name": "Get Logs - Last Number of Lines",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/logs/20200913/size/500",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913",
										"size",
										"500"
									]
								},
								"description": "Returns an existing _**Automation Log**_ tail, by specific size.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/size/:size\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n|size            |number|A fixed number of lines from the end of the log upwards.                                   |\r\n\r\n#### Response Content\r\n> The response is an array of log entries of media type ```text/plain```.\r\n> Log entries are separated by an empty line.\r\n\r\n```\r\nDBG - 2020-07-08 07:31:29.092\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : DEBUG\r\n    TimeStamp  : 2020-07-08 07:31:29.092\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : [OnBeforeTestExecution] does not need an implementation for this connector\r\n\r\nAutomation.Kdd.Agent Information: 0 : INF - 2020-07-08 07:31:29.094\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : INFO\r\n    TimeStamp  : 2020-07-08 07:31:29.094\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : executing 'Login'\r\n\r\nAutomation.Kdd.Agent Information: 0 : [GoToUrl]; argument [https://gravitymvctestapplication.azurewebsites.net/] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Username]; argument [userName] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Password]; argument [password] executed\r\nAutomation.Kdd.Agent Information: 0 : [Click]; element [//button[contains(.,'Log In')]] executed\r\nAutomation.Kdd.Agent Information: 0 : [WaitForUrl] executed\r\nAutomation.Kdd.Agent Information: 0 : [Assert]; argument [{{$ --url --match:Dashboard}}] executed\r\nAutomation.Kdd.Agent Information: 0 : [CloseBrowser] executed\r\nAutomation.Kdd.Agent Information: 0 : [web-automation]; argument [1/1] executed\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Logs - Last Number of Lines",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/logs/20200913/size/500",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"logs",
												"20200913",
												"size",
												"500"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Logs",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/logs/20200913",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"logs",
										"20200913"
									]
								},
								"description": "Returns an existing _**Automation Log**_.\r\n\r\n> Configuration key to set logs folder is ```reportConfiguration.logsOut```.\r\n> If not specified, the default logs directory is ```<current_directory>\\Logs```.\r\n\r\n```\r\nGET /api/logs/:log_id/configuration/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                                                                |\r\n|----------------|------|-------------------------------------------------------------------------------------------|\r\n|log_id          |string|The ID of the _**Automation Log**_. Will be the date in the following format ```yyyyMMdd```|\r\n\r\n#### Response Content\r\n> The response is an array of log entries of media type ```text/plain```.\r\n> Log entries are separated by an empty line.\r\n\r\n```\r\nDBG - 2020-07-08 07:31:29.092\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : DEBUG\r\n    TimeStamp  : 2020-07-08 07:31:29.092\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : [OnBeforeTestExecution] does not need an implementation for this connector\r\n\r\nAutomation.Kdd.Agent Information: 0 : INF - 2020-07-08 07:31:29.094\r\n    Application: kdd.engine\r\n    Logger     : kdd.engine.text-connector\r\n    LogLevel   : INFO\r\n    TimeStamp  : 2020-07-08 07:31:29.094\r\n    MachineName: DESKTOP-G1MC8H7\r\n    Message    : executing 'Login'\r\n\r\nAutomation.Kdd.Agent Information: 0 : [GoToUrl]; argument [https://gravitymvctestapplication.azurewebsites.net/] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Username]; argument [userName] executed\r\nAutomation.Kdd.Agent Information: 0 : [SendKeys]; element [Password]; argument [password] executed\r\nAutomation.Kdd.Agent Information: 0 : [Click]; element [//button[contains(.,'Log In')]] executed\r\nAutomation.Kdd.Agent Information: 0 : [WaitForUrl] executed\r\nAutomation.Kdd.Agent Information: 0 : [Assert]; argument [{{$ --url --match:Dashboard}}] executed\r\nAutomation.Kdd.Agent Information: 0 : [CloseBrowser] executed\r\nAutomation.Kdd.Agent Information: 0 : [web-automation]; argument [1/1] executed\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Automation Logs**_ is returned as part of the response.|\r\n|404 |Not Found, the _**Automation Logs**_ were not found.                   |\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Get Logs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{endpoint}}/logs/20200913",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"logs",
												"20200913"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Automation Logs API**_ to get logs and analysis information about the automation runs and tests.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00361055-41a4-4208-9362-bdcd81282f1c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37b615ba-854e-4485-a21b-c2dbf9b6fea5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to request details about automation logs which were created during the automation run.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1d7b865-b3c0-4512-9893-5da122a2c806",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5632d60d-0b00-4383-b0a6-9abd4cca1fbb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Debug Automation",
			"item": [
				{
					"name": "Documentation",
					"item": [
						{
							"name": "Send Gravity API Web Automation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8285f15-8750-4ad9-9477-7fc894b425a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								},
								"description": "> Note, the API used for these requests is the underline [Gravity API](https://github.com/gravity-api?tab=repositories).\r\n\r\n## Execute Gravity API Request\r\nReturns an _**Orbit Response**_ object.\r\n\r\n```\r\nGET /api/v3/debug\r\n```\r\n\r\n### Request Content\r\nPlease see below for a typical request:\r\n\r\n```js\r\n{\r\n  \"DataSource\": null,\r\n  \"Authentication\": {\r\n    \"Password\": \"rhinoPassword\",\r\n    \"UserName\": \"rhinoUserName\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"MaxParallel\": 1,\r\n    \"FailOnException\": false,\r\n    \"OptimalThreshold\": 3.0,\r\n    \"QualityThreshold\": 0.0,\r\n    \"ToleranceThreshold\": 0.0,\r\n    \"Priority\": 0,\r\n    \"Severity\": 0,\r\n    \"ErrorOnExitCode\": 0,\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000,\r\n    \"RetrunExceptions\": true,\r\n    \"ReturnPerformancePoints\": true,\r\n    \"ReturnEnvironment\": true,\r\n    \"TerminateOnAssertFailure\": false\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n    \"ScreenshotsOut\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\"\r\n  },\r\n  \"DriverParams\": \"{\\r\\n  \\\"driver\\\": \\\"ChromeDriver\\\",\\r\\n  \\\"driverBinaries\\\": \\\"D:\\\\\\\\automation-env\\\\\\\\web-drivers\\\"\\r\\n}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"#SearchButton\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThe following system fields must be always included in the request:\r\n\r\n#### General\r\n|Name                                                  |Type  |Description                                                                  |\r\n|------------------------------------------------- ----|------|-----------------------------------------------------------------------------|\r\n|[authentication](#authentication)                     |object|A collection of extraction objects returned by Gravity API.                  |\r\n|[engineConfiguration](#engine-configuration)          |object|A set of data, based on the request sent to Gravity API.                     |\r\n|[screenshotsConfiguration](#screenshots-configuration)|object|A set of data, based on the request sent to Gravity API.                     |\r\n|driverParams                                          |string|Parameters which represents the target platforms on which the tests will run.|\r\n|[actions](#gravity-action)                            |array |A collection of _**Gravity Plugin**_ to execute by this request.             |\r\n\r\n#### Authentication\r\n|Name    |Type  |Description                 |\r\n|--------|------|----------------------------|\r\n|userName|string|A valid Rhino API user name.|\r\n|password|string|A valid Rhino API password. |\r\n\r\n#### Engine Configuration\r\n|Name                    |Type   |Description                                                                                                            |\r\n|------------------------|-------|-----------------------------------------------------------------------------------------------------------------------|\r\n|maxParallel             |number |The maximum number of tests that will be executed in parallel.                                                         |\r\n|failOnException         |boolean|When set to true, test cases will fail if exceptions were thrown during test regardless of assertions passed or failed.|\r\n|optimalThreshold        |decimal|Any test which violates this threshold (in minutes), will be marked as non-optimal.                                    |\r\n|qualityThreshold        |decimal|Any test which violates this threshold (in percents), will be marked as failed.                                        |\r\n|toleranceThreshold      |decimal|Any test which falls within this threshold (in percents), will be marked as warning when fail.                         |\r\n|priority                |number |All tests with priority lower than this number will be marked as warning when fail.                                    |\r\n|severity                |number |All tests with severity lower than this number will be marked as warning when fail.                                    |\r\n|errorOnExitCode         |number |The error code (console application error code) which will cause the CI/CD process to fail.                            |\r\n|elementSearchingTimeout |number |The timeout in millisecond when searching for elements.                                                                |\r\n|pageLoadTimeout         |number |The timeout in millisecond when loading a page or application.                                                         |\r\n|retrunExceptions        |boolean|When set to false, exceptions will not be returned by Gravity engine. This might affect the tests results.             |\r\n|returnPerformancePoints |boolean|When set to false, performance data will not be returned by Gravity engine. This might affect the tests results.       |\r\n|returnEnvironment       |boolean|When set to true, will return the current Gravity Environment parameters.                                              |\r\n|terminateOnAssertFailure|boolean|When set to true, automation will stop if assertion any assertion action failed.                                       |\r\n\r\n#### Screenshots Configuration\r\n|Name             |Type   |Description                                                                                               |\r\n|-----------------|-------|----------------------------------------------------------------------------------------------------------|\r\n|keepOriginal     |boolean|When set to true, will keep the original file created by Gravity engine, when creating a new Rhino report.|\r\n|returnScreenshots|boolean|When set to false, screenshots will be returned from Gravity engine.                                      |\r\n|screenshotsOut   |decimal|The directory in which to save automatic screenshots.                                                     |\r\n\r\n#### Gravity Action\r\n|Name                   |Type  |Description                                                                                                                                              |\r\n|-----------------------|------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|actionType             |string|_**Gravity Plugin**_ name (i.e. Click or SendKeys).                                                                                                      |\r\n|Locator                |string|Elements locator type (i.e. Xpath or CssSelector).                                                                                                       |\r\n|Reference              |number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array (read only property).                                           |\r\n|RepeatReference        |number|A zero based index of the _**Gravity Plugin**_ n the _**Repeat**_ plugin actions array (read only property).                                             |\r\n|ElementAttributeToActOn|string|The element attribute name on which this _**Gravity Plugin**_ will act (i.e. href or class).                                                             |\r\n|ElementToActOn         |string|The element on which this _**Gravity Plugin**_ will act. This will be the locator value (i.e. if the locator type is CssSelector, it will be #myElement).|\r\n|RegularExpression      |string|A regular expression to apply on attribute or inner text values of an element, before the _**Gravity Plugin**_ is executed.                              |\r\n|Argument               |string|An argument to pass along with this _**Gravity Plugin**_ (i.e. if the action is SendKeys the argument can be \"hello world!\".                             |\r\n\r\n### Response Content\r\nPlease see below for a typical response:\r\n\r\n```js\r\n{\r\n  \"extractions\": [\r\n    {\r\n      \"key\": \"1\",\r\n      \"entities\": [\r\n        {\r\n          \"entityContentEntries\": {\r\n            \"actual\": \"3\",\r\n            \"expected\": \"0\",\r\n            \"method\": \"gt\",\r\n            \"assertion\": \"true\"\r\n          }\r\n        }\r\n      ],\r\n      \"orbitSession\": {\r\n        \"sessionsId\": \"2a0d998832ff9bd2f859a16a9664cb37\",\r\n        \"machineName\": \"DESKTOP-G1MC8H7\",\r\n        \"machineIp\": \"192.168.1.21\"\r\n      }\r\n    },\r\n    {\r\n      \"key\": \"0\",\r\n      \"entities\": [\r\n        {\r\n          \"entityContentEntries\": {\r\n            \"actual\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n            \"expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n            \"method\": \"match\",\r\n            \"assertion\": \"true\"\r\n          }\r\n        }\r\n      ],\r\n      \"orbitSession\": {\r\n        \"sessionsId\": \"2a0d998832ff9bd2f859a16a9664cb37\",\r\n        \"machineName\": \"DESKTOP-G1MC8H7\",\r\n        \"machineIp\": \"192.168.1.21\"\r\n      }\r\n    }\r\n  ],\r\n  \"orbitRequest\": {\r\n    \"serializedRequest\": null,\r\n    \"serializedResponse\": null,\r\n    \"exceptions\": [],\r\n    \"performancePoints\": [\r\n      {\r\n        \"time\": 3659.9477,\r\n        \"actionReference\": 0,\r\n        \"action\": \"GoToUrl\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 383.979,\r\n        \"actionReference\": 1,\r\n        \"action\": \"Assert\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 352.1497,\r\n        \"actionReference\": 2,\r\n        \"action\": \"CloseAllChildWindows\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 469.0115,\r\n        \"actionReference\": 3,\r\n        \"action\": \"SendKeys\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 648.0932,\r\n        \"actionReference\": 4,\r\n        \"action\": \"Click\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 3341.0645,\r\n        \"actionReference\": 5,\r\n        \"action\": \"Wait\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 372.835,\r\n        \"actionReference\": 6,\r\n        \"action\": \"Assert\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 15435.1959,\r\n        \"actionReference\": 7,\r\n        \"action\": \"RegisterParameter\",\r\n        \"repeatReference\": 0\r\n      },\r\n      {\r\n        \"time\": 137.4526,\r\n        \"actionReference\": 8,\r\n        \"action\": \"CloseBrowser\",\r\n        \"repeatReference\": 0\r\n      }\r\n    ],\r\n    \"screenshots\": [\r\n      {\r\n        \"actionReference\": 7,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090121559-7-RegisterParameter.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 6,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090106121-6-Assert.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 5,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090105752-5-Wait.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 4,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090102338-4-Click.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 3,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090101706-3-SendKeys.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 2,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090101249-2-CloseAllChildWindows.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 1,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090100860-1-Assert.png\"\r\n      },\r\n      {\r\n        \"actionReference\": 0,\r\n        \"comment\": \"info\",\r\n        \"type\": \"PNG\",\r\n        \"location\": \"D:\\\\sites\\\\RhinoOutputs\\\\Images\\\\20200821090100416-0-GoToUrl.png\"\r\n      }\r\n    ],\r\n    \"userName\": \"user@rhino.api\",\r\n    \"startTime\": \"2020-08-21T12:00:52.0187856+03:00\",\r\n    \"endTime\": \"2020-08-21T12:01:22.0720038+03:00\",\r\n    \"totalRunTime\": 30053,\r\n    \"responseSize\": 5550,\r\n    \"requestSize\": 4794,\r\n    \"environment\": {\r\n      \"applicationParams\": {},\r\n      \"macroParams\": {},\r\n      \"sessionParams\": {\r\n        \"first_name\": \"John\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe following system fields are always included in the response:\r\n\r\n#### General\r\n|Name                         |Type  |Description                                                |\r\n|-----------------------------|------|-----------------------------------------------------------|\r\n|[extractions](#extraction)   |array |A collection of extraction objects returned by Gravity API.|\r\n|[orbitRequest](#Orbit-request)|object|A set of data, based on the request sent to Gravity API.  |\r\n\r\n#### Extraction\r\n|Name                          |Type  |Description                                                                  |\r\n|------------------------------|------|-----------------------------------------------------------------------------|\r\n|key                           |string|The unique identifier for this extraction entry.                             |\r\n|[entities](#entity)           |array |A collection of information which describes an entity (as map or dictionary).|\r\n|[orbitSession](#orbit-session)|object|Gravity API session information.                                             |\r\n\r\n#### Entity\r\n|Name   |Type  |Description                                                |\r\n|-------|------|-----------------------------------------------------------|\r\n|content|object|A collection of Key/Value which describes an entity schema.|\r\n\r\n#### Orbit Session\r\n|Name       |Type   |Description                                                                |\r\n|-----------|-------|---------------------------------------------------------------------------|\r\n|sessionsId |string|Gravity API session ID. Will be the WebDriver session if WebDriver was used.|\r\n|machineName|string|The machine name under which this Gravity API session was executed.         |\r\n|machineIp  |string|The machine IP address under which this Gravity API session was executed.   |\r\n\r\n#### Orbit Request\r\n|Name                                   |Type     |Description                                                                                                       |\r\n|---------------------------------------|---------|------------------------------------------------------------------------------------------------------------------|\r\n|serializedRequest                      |string   |The serialized _**Web Automation**_ request sent by the client. _Will always be null due do privacy policies_.    |\r\n|serializedResponse                     |string   |The serialized _**Orbit Response**_ object returned by Gravity API. _Will always be null due do privacy policies_.|\r\n|[exceptions](#orbit-exception)         |array    |A collection of _**Orbit Exception**_ object thrown during execution.                                             |\r\n|[performancePoints](#performance-point)|array    |A collection of _**Orbit Performance Point**_ object.                                                             |\r\n|[screenshots](#gravity-screenshot)     |array    |A collection of _**Orbit Screenshot**_ object.                                                                    |\r\n|userName                               |string   |The user name used to execute this _**Web Automation**_ request.                                                  |\r\n|start                                  |date+time|The start time of this _**Web Automation**_.                                                                      |\r\n|end                                    |date+time|The end time of this _**Web Automation**_.                                                                        |\r\n|runTime                                |time     |The run time (total) of this _**Web Automation**_.                                                                |\r\n|responseSize                           |number   |Response size in KB of the _**Orbit Response**_ object returned by Gravity API.                                   |\r\n|requestSize                            |number   |Response size in KB of the _**Web Automation**_ object sent to Gravity API.                                       |\r\n|environment                            |object   |The run time (total) of this _**Web Automation**_.                                                                |\r\n|[environment](#environment)            |object   |The automation environment data state (parameters current value) from Rhino Server State.                         |\r\n\r\n#### Orbit Exception\r\n|Name           |Type  |Description                                                                                                        |\r\n|---------------|------|-------------------------------------------------------------------------------------------------------------------|\r\n|exception      |object|The thrown exception full stack information.                                                                       |\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ which throw the exception in the _**Web Automation**_ actions array.|\r\n|action         |string|The _**Gravity Plugin**_ which throw the exception (i.e. Click or SendKeys).                                       |\r\n|screenshot     |string|The full path of this exception screenshot (if taken).                                                             |\r\n|repeatReference|number|A zero based index of the _**Gravity Plugin**_ which throw the exception in the _**Repeat**_ plugin actions array. |\r\n|context        |object|A context for this exception which can hold an extra information.                                                  |\r\n\r\n#### Performance Point\r\n|Name           |Type  |Description                                                                              |\r\n|---------------|------|-----------------------------------------------------------------------------------------|\r\n|time           |double|The total run time of the _**Gravity Plugin**_ (i.e. Click or SendKeys).                 |\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array.|\r\n|action         |string|The _**Gravity Plugin**_ which throw the exception (i.e. Click or SendKeys).             |\r\n|repeatReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Repeat**_ plugin actions array. |\r\n\r\n#### Screenshot\r\n|Name           |Type  |Description                                                                              |\r\n|---------------|------|-----------------------------------------------------------------------------------------|\r\n|actionReference|number|A zero based index of the _**Gravity Plugin**_ in the _**Web Automation**_ actions array.|\r\n|comment        |string|Any text for describing the screenshot.                                                  |\r\n|type           |string|The image file type (i.e. PNG or JPG).                                                   |\r\n|location       |string|The full path of this exception screenshot (if taken).                                   |\r\n\r\n#### Environment\r\n|Name             |Type  |Description                                                                                                                  |\r\n|-----------------|------|-----------------------------------------------------------------------------------------------------------------------------|\r\n|applicationParams|object|The application parameters - Gravity Environment parameters, available for all runs. Will only reset when restart the server.|\r\n|applicationParams|object|The session parameters - Gravity Environment parameters, available for a single runs.  Will reset when run is completed.     |\r\n|macorParams      |object|The macro parameters - Gravity Macro parameters, available for a single runs.  Will reset when run is completed.             |\r\n\r\n### Response Codes\r\n|Code|Description                                                            |\r\n|----|-----------------------------------------------------------------------|\r\n|200 |Success, the _**Orbit Response**_ was returned as part of the response.|\r\n|500 |Fail, the server encountered an unexpected error.                      |"
							},
							"response": [
								{
									"name": "Send Gravity API Web Automation Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{\\r\\n  \\\"driver\\\": \\\"ChromeDriver\\\",\\r\\n  \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"\\r\\n}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    },\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    },\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    },\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    },\r\n    {\r\n      \"ActionType\": \"CloseBrowser\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/debug",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"debug"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "This guide explains how to access and use _**Debug API**_ to simulate debugging of Rhino Spec.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e71e1683-1a27-4577-bec3-06543c76b20d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3805f8b9-7815-4be3-a713-054b742e0bc8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests: Sanity",
					"item": [
						{
							"name": "Debug - Step #1 - Create - Go To Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94d52a21-570a-4f4d-b42d-1026e0dac4a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('session_id', jsonData.extractions[0].orbitSession.sessionsId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"GoToUrl\",\r\n      \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #2 - Assert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10ccb1de-b60e-47a5-8312-83bdef4ebf7c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #3 - Close All Child Windows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e858a35f-b1b1-46f3-b603-b4e31f9f7094",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"CloseAllChildWindows\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #4 - Send Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f8ce11f-9dd4-4cb3-9808-0a2179108c45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"SendKeys\",\r\n      \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n      \"Argument\": \"Carson\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #5 - Click",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21f6b3a4-84a1-47a1-a501-1e280ad3e118",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Click\",\r\n      \"Locator\": \"CssSelector\",\r\n      \"ElementToActOn\": \"#SearchButton\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #6 - Wait",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d1e7cc7-f5ea-45f8-b1dd-7c905770e5a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Wait\",\r\n      \"Argument\": \"3000\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #7 - Assert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b193714-ac37-46a8-b3c8-81ac9dc7e6f6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"Assert\",\r\n      \"ElementToActOn\": \"//td[@id]\",\r\n      \"Argument\": \"{{$ --count --gt:0}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #8 - Register Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f788eca-a0dd-4347-a4f4-eef660781244",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"RegisterParameter\",\r\n      \"ElementToActOn\": \"Jhon\",\r\n      \"Argument\": \"first_name\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug - Step #9 - Close Browser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "962a3ed8-32df-4bda-bb9c-8b84d3951b71",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DataSource\": null,\r\n  \"Authentication\": {\r\n    \"Password\": \"{{rhino_password}}\",\r\n    \"UserName\": \"{{rhino_user}}\"\r\n  },\r\n  \"EngineConfiguration\": {\r\n    \"MaxParallel\": 1,\r\n    \"FailOnException\": false,\r\n    \"OptimalThreshold\": 3.0,\r\n    \"QualityThreshold\": 0.0,\r\n    \"ToleranceThreshold\": 0.0,\r\n    \"Priority\": 0,\r\n    \"Severity\": 0,\r\n    \"ErrorOnExitCode\": 0,\r\n    \"ElementSearchingTimeout\": 15000,\r\n    \"PageLoadTimeout\": 60000,\r\n    \"RetrunExceptions\": true,\r\n    \"ReturnPerformancePoints\": true,\r\n    \"ReturnEnvironment\": true,\r\n    \"TerminateOnAssertFailure\": false\r\n  },\r\n  \"ScreenshotsConfiguration\": {\r\n    \"KeepOriginal\": false,\r\n    \"ReturnScreenshots\": true,\r\n  },\r\n  \"DriverParams\": \"{{session_id}}\",\r\n  \"Extractions\": null,\r\n  \"Actions\": [\r\n    {\r\n      \"ActionType\": \"CloseBrowser\",\r\n      \"Locator\": \"Xpath\",\r\n      \"Reference\": 0,\r\n      \"RepeatReference\": 0,\r\n      \"Actions\": [],\r\n      \"ElementAttributeToActOn\": \"\",\r\n      \"ElementToActOn\": \"\",\r\n      \"RegularExpression\": \".*\",\r\n      \"Argument\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/debug",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# API - Introduction\r\nUse the following API methods to simulate a debugging process of your automation and gets underline exceptions and extractions.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0d9b96b3-ad04-489f-936f-634ca8305020",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "79bbada5-2acb-4ac5-968c-3f449c4e428b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{rhino_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{rhino_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "341d4748-87fd-441c-99eb-291a26767ed4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "10f21a3a-bf9c-4ed4-9713-7914e6a1be46",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "54738345-adf0-4b9a-a963-be75d0bacf7c",
			"key": "endpoint",
			"value": "https://localhost:5001/api/v3"
		},
		{
			"id": "320e21e8-0008-4056-bf4a-88dedf6ce79a",
			"key": "rhino_password",
			"value": ""
		},
		{
			"id": "0b8b58a1-2ac7-4fda-ba33-f0f4772ca2af",
			"key": "rhino_drivers",
			"value": "http://192.168.1.11:4444/wd/hub"
		},
		{
			"id": "4004055c-c290-4630-95af-2f32bfde4dee",
			"key": "rhino_user",
			"value": ""
		},
		{
			"id": "e7532c99-8b37-48d0-a800-06e95192b813",
			"key": "models_id",
			"value": "9645c03a-6ab1-422c-883b-d1d9ae6a3877"
		},
		{
			"id": "b7a99bae-152c-4eb9-8a76-0f9336ae9574",
			"key": "collection_id",
			"value": "030230f0-7b84-4d0f-b0f4-c461abd2a379"
		},
		{
			"id": "4b62bbfd-ea50-4621-b691-aa6de03a5a75",
			"key": "configuration_id",
			"value": "cdfc307d-2317-46e5-8112-d8871574b470"
		},
		{
			"id": "98648110-0fbd-4860-b9fb-81847eebadbb",
			"key": "session_id",
			"value": "f7e910fa634880341214ae135b8e582d"
		}
	],
	"protocolProfileBehavior": {}
}